/*%FSM<COMPILE "C:\Bis\fsmeditor\scriptedFSM.cfg, Firing Drill">*/
/*%FSM<HEAD>*/
/*
item0[] = {"Start",0,250,-520.000000,-1310.000000,-420.000000,-1260.000000,0.000000,"Start"};
item1[] = {"__s",4,218,-510.000000,-790.000000,-420.000000,-740.000000,0.000000,"1s"};
item2[] = {"Always",8,218,-520.000000,-610.000000,-410.000000,-560.000000,0.000000,"Always"};
item3[] = {"Init",2,250,-520.000000,-700.000000,-410.000000,-650.000000,0.000000,"Init"};
item4[] = {"Init2",2,250,-520.000000,-540.000000,-410.000000,-490.000000,0.000000,"Init2"};
item5[] = {"Entered_Start",4,218,-540.000000,-310.000000,-390.000000,-260.000000,0.000000,"Entered Start"};
item6[] = {"Ready",2,250,-510.000000,110.000000,-420.000000,160.000000,0.000000,"Ready"};
item7[] = {"Go",2,250,-510.000000,460.000000,-420.000000,500.000000,0.000000,"Go"};
item8[] = {"Exited_COF",2,250,-150.000000,560.000000,-60.000000,600.000000,0.000000,"Exited COF"};
item9[] = {"Restarting",2,250,0.000000,620.000000,90.000000,670.000000,0.000000,"Restarting"};
item10[] = {"Finish",2,250,-510.000000,610.000000,-420.000000,650.000000,0.000000,"Finish"};
item11[] = {"Results",2,250,-510.000000,760.000000,-420.000000,800.000000,0.000000,"Results"};
item12[] = {"Rules_changed",2,250,-720.000000,190.000000,-630.000000,240.000000,0.000000,"Rules changed"};
item13[] = {"Reset",2,250,0.000000,340.000000,90.000000,380.000000,0.000000,"Reset"};
item14[] = {"Returned_start_C",2,250,-160.000000,500.000000,-60.000000,540.000000,0.000000,"Returned start CP"};
item15[] = {"__0s_OR_Quick_st",4,218,-510.000000,190.000000,-420.000000,240.000000,0.000000,"10s" \n "OR" \n "Quick-start"};
item16[] = {"Ended",4,218,-510.000000,530.000000,-420.000000,570.000000,0.000000,"Ended"};
item17[] = {"__s",4,218,-510.000000,680.000000,-420.000000,720.000000,0.000000,"1s"};
item18[] = {"Restart_selector",4,218,-30.000000,730.000000,130.000000,840.000000,0.000000,"Restart selector " \n "OR" \n "60s" \n "OR " \n "Returned to Start"};
item19[] = {"Esc___Restart_OR",4,218,-310.000000,620.000000,-220.000000,660.000000,0.000000,"Esc > Restart" \n "OR" \n "Restart selector"};
item20[] = {"Exited_COF",4,218,-310.000000,560.000000,-220.000000,600.000000,0.000000,"Exited COF"};
item21[] = {"Returned_to_start",4,218,-340.000000,500.000000,-180.000000,540.000000,0.000000,"Returned to start CP"};
item22[] = {"Rules_changed",4,218,-610.000000,190.000000,-520.000000,240.000000,1.000000,"Rules changed"};
item23[] = {"Always",8,218,-720.000000,110.000000,-630.000000,160.000000,0.000000,"Always"};
item24[] = {"Always",8,218,0.000000,-40.000000,90.000000,0.000000,0.000000,"Always"};
item25[] = {"___5s",4,218,0.000000,430.000000,90.000000,480.000000,0.000000,"1.5s"};
item26[] = {"Select_rules",2,4346,-510.000000,-40.000000,-420.000000,10.000000,0.000000,"Select rules"};
item27[] = {"Rules_selected_OR",4,218,-540.000000,30.000000,-390.000000,80.000000,0.000000,"Rules selected" \n "OR" \n "TImeout 30s"};
item28[] = {"Always",8,218,-520.000000,-1240.000000,-410.000000,-1190.000000,0.000000,"Always"};
item29[] = {"Pre_init_Load_co",2,250,-510.000000,-1160.000000,-420.000000,-1110.000000,0.000000,"Pre-init" \n "Load config"};
item30[] = {"Otherwise",8,218,-520.000000,-1080.000000,-410.000000,-1030.000000,0.000000,"Otherwise"};
item31[] = {"No_config",4,218,-640.000000,-1080.000000,-550.000000,-1030.000000,1.000000,"No config"};
item32[] = {"End",1,250,-780.000000,-1080.000000,-690.000000,-1030.000000,0.000000,"End"};
item33[] = {"Process_config_Spawn",2,250,-510.000000,-1010.000000,-420.000000,-960.000000,0.000000,"Process config" \n "Spawn DynOs"};
item34[] = {"No_CPs",4,218,-630.000000,-450.000000,-540.000000,-400.000000,1.000000,"No CPs"};
item35[] = {"End_1",1,250,-770.000000,-450.000000,-680.000000,-400.000000,0.000000,"End"};
item36[] = {"___5s",4,218,-510.000000,-460.000000,-420.000000,-410.000000,0.000000,"0.5s"};
item37[] = {"Wait_to_enter_St",2,250,-520.000000,-390.000000,-410.000000,-340.000000,0.000000,"Wait to enter Start"};
item38[] = {"Entered_start",2,250,-520.000000,-240.000000,-410.000000,-190.000000,0.000000,"Entered start"};
item39[] = {"Otherwise",8,218,-420.000000,-150.000000,-310.000000,-100.000000,0.000000,"Otherwise"};
item40[] = {"Started_outside",4,218,-610.000000,-150.000000,-520.000000,-100.000000,1.000000,"Started outside" \n "1s"};
item41[] = {"Always",8,218,-520.000000,-940.000000,-410.000000,-890.000000,0.000000,"Always"};
item42[] = {"Init_Weapons",2,250,-510.000000,-860.000000,-420.000000,-810.000000,0.000000,"Init" \n "Weapons"};
item43[] = {"Countdown",2,250,-510.000000,270.000000,-420.000000,320.000000,0.000000,"Countdown"};
item44[] = {"Go",4,218,-510.000000,360.000000,-420.000000,410.000000,0.000000,"Go"};
item45[] = {"Quit",1,250,-140.000000,140.000000,-50.000000,190.000000,0.000000,"Quit"};
item46[] = {"Quit_",4,218,-240.000000,180.000000,-150.000000,230.000000,5.000000,"Quit?"};
item47[] = {"Cheat_",4,218,-630.000000,460.000000,-540.000000,510.000000,6.000000,"Cheat?"};
item48[] = {"Cheat",1,250,-740.000000,460.000000,-650.000000,510.000000,0.000000,"Cheat"};
item49[] = {"Died_",4,218,-630.000000,520.000000,-540.000000,570.000000,7.000000,"Died?"};
item50[] = {"Died",1,250,-740.000000,520.000000,-650.000000,570.000000,0.000000,"Died"};
item51[] = {"Restart",2,250,-200.000000,610.000000,-110.000000,660.000000,0.000000,"Restart"};
item52[] = {"Always",8,218,-100.000000,620.000000,-10.000000,670.000000,0.000000,"Always"};
link0[] = {0,28};
link1[] = {1,3};
link2[] = {2,4};
link3[] = {3,2};
link4[] = {4,34};
link5[] = {4,36};
link6[] = {5,38};
link7[] = {6,15};
link8[] = {6,22};
link9[] = {6,46};
link10[] = {7,16};
link11[] = {7,19};
link12[] = {7,20};
link13[] = {7,21};
link14[] = {7,46};
link15[] = {7,47};
link16[] = {7,49};
link17[] = {8,25};
link18[] = {8,46};
link19[] = {9,25};
link20[] = {9,46};
link21[] = {10,17};
link22[] = {10,46};
link23[] = {11,18};
link24[] = {11,46};
link25[] = {12,23};
link26[] = {12,46};
link27[] = {13,24};
link28[] = {13,46};
link29[] = {14,25};
link30[] = {14,46};
link31[] = {15,43};
link32[] = {16,10};
link33[] = {17,11};
link34[] = {18,9};
link35[] = {19,51};
link36[] = {20,8};
link37[] = {21,14};
link38[] = {22,12};
link39[] = {23,6};
link40[] = {24,26};
link41[] = {25,13};
link42[] = {26,27};
link43[] = {26,46};
link44[] = {27,6};
link45[] = {28,29};
link46[] = {29,30};
link47[] = {29,31};
link48[] = {30,33};
link49[] = {31,32};
link50[] = {33,41};
link51[] = {34,35};
link52[] = {36,37};
link53[] = {37,5};
link54[] = {37,46};
link55[] = {38,39};
link56[] = {38,40};
link57[] = {38,46};
link58[] = {39,26};
link59[] = {40,26};
link60[] = {41,42};
link61[] = {42,1};
link62[] = {43,44};
link63[] = {43,46};
link64[] = {44,7};
link65[] = {46,45};
link66[] = {47,48};
link67[] = {49,50};
link68[] = {51,52};
link69[] = {52,9};
globals[] = {10.000000,1,0,0,0,640,480,1,225,6316128,1,-806.168823,-56.623665,77.810272,-642.396179,1073,1031,1};
window[] = {2,-1,-1,-1,-1,1110,200,1819,200,3,1091};
*//*%FSM</HEAD>*/
class FSM
{
        fsmName = "Firing Drill";
        class States
        {
                /*%FSM<STATE "Start">*/
                class Start
                {
                        name = "Start";
                        itemno = 0;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Always">*/
                                class Always
                                {
                                        itemno = 28;
                                        priority = 0.000000;
                                        to="Pre_init_Load_co";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Init">*/
                class Init
                {
                        name = "Init";
                        itemno = 3;
                        init = /*%FSM<STATEINIT""">*/"//Re-color configured objects" \n
                         "private [""_recolor""];" \n
                         "_recolor = getArray (_cfgFD >> ""recolor"");" \n
                         "{" \n
                         "	private [""_object""];" \n
                         "	_object = call (compile _x);" \n
                         "	//TODO: check object exists or throw error" \n
                         "	_object setObjectTexture [0, ""#(argb,8,8,3)color("" + (str (BIS_FD_color select 0)) + "","" + (str (BIS_FD_color select 1)) + "","" + (str (BIS_FD_color select 2)) + "",1.0,co)""];" \n
                         "} forEach _recolor;" \n
                         "" \n
                         "//Apply configured decals" \n
                         "private [""_decals""];" \n
                         "_decals = getArray (_cfgFD >> ""decals"");" \n
                         "{" \n
                         "	private [""_object""];" \n
                         "	_object = call (compile (_x select 0));" \n
                         "	_object setObjectTexture [_x select 2, _x select 1];" \n
                         "} forEach _decals;" \n
                         "" \n
                         "BIS_FD = -1;" \n
                         "BIS_FD_activeCP = -1;" \n
                         "BIS_FD_nextCP = -1;" \n
                         "BIS_FD_CPIn = -1;" \n
                         "BIS_FD_atStart = false;" \n
                         "BIS_FD_ended = false;" \n
                         "BIS_FD_ending = false;" \n
                         "BIS_FD_PiPStarting = false;" \n
                         "BIS_FD_PiPEnding = false;" \n
                         "BIS_FD_activeTargets = 0;" \n
                         "BIS_FD_CPMarkers = [];" \n
                         "BIS_FD_CPAreaMarkers = [];" \n
                         "BIS_FD_CPShootingBoxMarkers = [];" \n
                         "BIS_FD_CPTargetMarkers = [];" \n
                         "BIS_FD_CPTargetMarkerTypes = [];" \n
                         "BIS_FD_sessionTimes = [];" \n
                         "BIS_FD_completedOnce = false;" \n
                         "" \n
                         "BIS_FD_CPs = [];" \n
                         "" \n
                         "//Group for accuracy target logics" \n
                         "createCenter civilian;" \n
                         "BIS_FD_accGrp = createGroup civilian;" \n
                         "" \n
                         "//TODO: seperate construction function" \n
                         "//Fetch all CPs" \n
                         "private [""_cps""];" \n
                         "_cps = _cfgFD >> ""CheckPoints"";" \n
                         "" \n
                         "for ""_i"" from 0 to ((count _cps) - 1) do " \n
                         "{" \n
                         "	private [""_cp""];" \n
                         "	_cp = _cps select _i;" \n
                         "	" \n
                         "	if (isClass _cp) then " \n
                         "	{" \n
                         "		//Fetch real Object (Trigger) representing CP" \n
                         "		private [""_cpObject"", ""_height""];" \n
                         "		_cpObject = objNull;" \n
                         "		call (compile (""_cpObject = "" + (getText (_cp >> ""object""))));" \n
                         "		" \n
                         "		_cpObject setVariable [""CP"", _i + 1];" \n
                         "		_cpObject setVariable [""clear"", false];" \n
                         "		_cpObject setVariable [""activated"", false];" \n
                         "		" \n
                         "		//Fetch CP height other than 0" \n
                         "		_height = getNumber (_cp >> ""height"");" \n
                         "		_cpObject setVariable [""height"", _height];" \n
                         "		" \n
                         "		//Fetch all shooting boxes" \n
                         "		private [""_cfgShootingBoxes"", ""_shootingBoxes""];" \n
                         "		_cfgShootingBoxes = getArray (_cp >> ""shootingBoxes"");" \n
                         "		_shootingBoxes = [];" \n
                         "		" \n
                         "		for ""_k"" from 0 to ((count _cfgShootingBoxes) - 1) do " \n
                         "		{" \n
                         "			private [""_shootingBox"", ""_shootingBoxObject""];" \n
                         "			_shootingBox = _cfgShootingBoxes select _k;" \n
                         "			call (compile (""_shootingBoxObject = "" + _shootingBox));" \n
                         "" \n
                         "			_shootingBoxObject setTriggerActivation [""NONE"", ""PRESENT"", true];" \n
                         "			_shootingBoxObject triggerAttachVehicle [BIS_FD_Competitor];" \n
                         "			" \n
                         "			_shootingBoxes set [count _shootingBoxes, _shootingBoxObject];" \n
                         "		};" \n
                         "		" \n
                         "		_cpObject setVariable [""shootingBoxes"", _shootingBoxes];" \n
                         "		" \n
                         "		//Fetch all allowed weapons" \n
                         "		private [""_weapons"", ""_weaponNames"", ""_weaponIcons""];" \n
                         "		_weapons = getArray (_cp >> ""weapons"");" \n
                         "		_weaponNames = [];" \n
                         "		_weaponIcons = [];" \n
                         "		" \n
                         "		{" \n
                         "			_weaponNames set [count _weaponNames, getText (configFile >> ""cfgWeapons"" >> _x >> ""displayName"")];" \n
                         "			_weaponIcons set [count _weaponIcons, getText (configFile >> ""cfgWeapons"" >> _x >> ""picture"")];" \n
                         "		} forEach _weapons;" \n
                         "		" \n
                         "		_cpObject setVariable [""weapons"", _weapons];" \n
                         "		_cpObject setVariable [""weaponNames"", _weaponNames];" \n
                         "		_cpObject setVariable [""weaponIcons"", _weaponIcons];" \n
                         "" \n
                         "		private [""_onActivate""];" \n
                         "		_onActivate = getText (_cp >> ""onActivate"");" \n
                         "		_cpObject setVariable [""onActivate"", _onActivate];" \n
                         "		" \n
                         "		//Fetch all allowed stances" \n
                         "		private [""_stances""];" \n
                         "		_stances = getArray (_cp >> ""stances"");" \n
                         "		_cpObject setVariable [""stances"", _stances];" \n
                         "		" \n
                         "		//Fetch all CP targets" \n
                         "		private [""_cfgTargets"", ""_targets"", ""_targetMarkers""];" \n
                         "		_cfgTargets = _cp >> ""Targets"";" \n
                         "		_targets = [];" \n
                         "		_targetMarkers = [];" \n
                         "		" \n
                         "		for ""_k"" from 0 to ((count _cfgTargets) - 1) do " \n
                         "		{" \n
                         "			private [""_target"", ""_targetObject"", ""_chance"", ""_cfgChance""];" \n
                         "			_target = _cfgTargets select _k;" \n
                         "			call (compile (""_targetObject = "" + (getText (_target >> ""object""))));" \n
                         "			" \n
                         "			_targetObject setVariable [""CP"", _i + 1];" \n
                         "			" \n
                         "			_chance = 1;" \n
                         "			_cfgChance = _target >> ""chance"";" \n
                         "			if ((configName _cfgChance) != """") then " \n
                         "			{" \n
                         "				_chance = getNumber _cfgChance;" \n
                         "			};" \n
                         "			" \n
                         "			if ((random 1) <= _chance) then " \n
                         "			{" \n
                         "				_targetObject hideObject false;" \n
                         "				_targetObject enableSimulation true;" \n
                         "				_targetObject setVariable [""spawned"", true];" \n
                         "			" \n
                         "				//Fetch trigger chance per target" \n
                         "				private [""_triggerChance"", ""_cfgTriggerChance""];" \n
                         "				_triggerChance = 1;" \n
                         "				_cfgTriggerChance = _target >> ""triggerChance"";" \n
                         "				if ((configName _cfgTriggerChance) != """") then " \n
                         "				{" \n
                         "					_triggerChance = getNumber _cfgTriggerChance;" \n
                         "				};" \n
                         "				_targetObject setVariable [""triggerChance"", _triggerChance];" \n
                         "				" \n
                         "				//Fetch trigger time" \n
                         "				private [""_triggerTime""];" \n
                         "				_triggerTime = getNumber (_target >> ""triggerTime"");" \n
                         "				_targetObject setVariable [""triggerTime"", _triggerTime];" \n
                         "				_targetObject setVariable [""triggerActive"", false];" \n
                         "				" \n
                         "				//Fetch trigger object(s)" \n
                         "				private [""_triggers"", ""_triggerEntry""];" \n
                         "				_triggers = [];" \n
                         "				_triggerEntry = _target >> ""trigger"";" \n
                         "				if (isText _triggerEntry) then " \n
                         "				{" \n
                         "					private [""_triggerObject""];" \n
                         "					_triggerObject = getText (_target >> ""trigger"");" \n
                         "					if (_triggerObject != """") then " \n
                         "					{" \n
                         "						call (compile (""_triggers = ["" + _triggerObject + ""]""));" \n
                         "					};" \n
                         "				} " \n
                         "				else " \n
                         "				{" \n
                         "					if (isArray _triggerEntry) then " \n
                         "					{" \n
                         "						_triggerEntryArray = getArray _triggerEntry;" \n
                         "						{" \n
                         "							call (compile (""_triggers pushBack "" + _x));" \n
                         "						} forEach _triggerEntryArray;" \n
                         "					};" \n
                         "				};" \n
                         "				" \n
                         "				_targetObject setVariable [""triggers"", _triggers];" \n
                         "				" \n
                         "				//TODO: necessary hack for objects inside objects" \n
                         "				private [""_ASL""];" \n
                         "				_ASL = _targetObject getVariable [""BIS_DynO_ASL"", false];" \n
                         "				" \n
                         "				//Fetch movement configuration" \n
                         "				private [""_positionsMoveMarkers"", ""_positionsMove"", ""_timesMove""];" \n
                         "				_positionsMove = [];" \n
                         "				_positionsMoveMarkers = getArray (_target >> ""positionsMove"");" \n
                         "				{" \n
                         "					private [""_wpPos""];" \n
                         "					_wpPos = markerPos _x;" \n
                         "					if (_ASL) then {_wpPos set [2, (getPosASL _targetObject) select 2];};" \n
                         "					_positionsMove set [count _positionsMove, _wpPos];" \n
                         "				} forEach _positionsMoveMarkers;" \n
                         "				_timesMove = getArray (_target >> ""timesMove"");" \n
                         "				_targetObject setVariable [""positionsMove"", _positionsMove];" \n
                         "				_targetObject setVariable [""timesMove"", _timesMove];" \n
                         "				" \n
                         "				//Fetch upTime" \n
                         "				private [""_upTime""];" \n
                         "				_upTime = _target >> ""upTime"";" \n
                         "				if ((configName _upTime) != """") then " \n
                         "				{" \n
                         "					_upTime = getNumber _upTime;" \n
                         "					_targetObject setVariable [""upTime"", _upTime];" \n
                         "				};" \n
                         "" \n
                         "				//Fetch type" \n
                         "				private [""_type""];" \n
                         "				_type = getText (_target >> ""type"");" \n
                         "				_targetObject setVariable [""type"", _type];" \n
                         "" \n
                         "				//Store type properties for cached access" \n
                         "				_cfgTarget = configFile >> ""CfgFiringDrills"" >> ""Targets"" >> _type;" \n
                         "				" \n
                         "				//Hit selections" \n
                         "				private [""_selectionsHit""];" \n
                         "				_selectionsHit = getArray (_cfgTarget >> ""selectionsHit"");" \n
                         "				_targetObject setVariable [""selectionsHit"", _selectionsHit];" \n
                         "" \n
                         "				//Event scripts" \n
                         "				private [""_onActivate"", ""_onDeactivate"", ""_onHit"", ""_onReset"", ""_onInit""];" \n
                         "				_onActivate = getText (_cfgTarget >> ""onActivate"");" \n
                         "				_targetObject setVariable [""onActivate"", _onActivate];" \n
                         "				_onDeactivate = getText (_cfgTarget >> ""onDeactivate"");" \n
                         "				_targetObject setVariable [""onDeactivate"", _onDeactivate];" \n
                         "				_onHit = getText (_cfgTarget >> ""onHit"");" \n
                         "				_targetObject setVariable [""onHit"", _onHit];" \n
                         "				_onReset = getText (_cfgTarget >> ""onReset"");" \n
                         "				_targetObject setVariable [""onReset"", _onReset];" \n
                         "				_onInit = getText (_cfgTarget >> ""onInit"");" \n
                         "				_targetObject setVariable [""onInit"", _onInit];" \n
                         "" \n
                         "				//PiP camera settings" \n
                         "				private [""_cameraPos"", ""_cameraFOV""];" \n
                         "				_cameraPos = getArray (_cfgTarget >> ""cameraPos"");" \n
                         "				if ((count _cameraPos) == 0) then {_cameraPos = [0, -1.5, 0];};" \n
                         "				_targetObject setVariable [""cameraPos"", _cameraPos];" \n
                         "				_cameraFOV = getNumber (_cfgTarget >> ""cameraFOV"");" \n
                         "				if (_cameraFOV == 0) then {_cameraFOV = 0.2;};" \n
                         "				_targetObject setVariable [""cameraFOV"", _cameraFOV];" \n
                         "				" \n
                         "				private [""_downTime""];" \n
                         "				_downTime = getNumber (_cfgTarget >> ""downTime"");" \n
                         "				_targetObject setVariable [""downTime"", _downTime];" \n
                         "" \n
                         "				//Accuracy zones" \n
                         "				//TODO: validation" \n
                         "				private [""_cfgZones"", ""_zoneDummies"", ""_zoneDistances"", ""_zoneBonuses""];" \n
                         "				_cfgZones = _cfgTarget >> ""Zones"";" \n
                         "				_zoneDummies = [];" \n
                         "				_zoneDistances = [];" \n
                         "				_zoneBonuses = [];" \n
                         "				if ((count _cfgZones) > 0) then " \n
                         "				{" \n
                         "					for ""_i"" from 0 to ((count _cfgZones) - 1) do " \n
                         "					{" \n
                         "						private [""_zone"", ""_dummy"", ""_center""];" \n
                         "						_zone = _cfgZones select _i;" \n
                         "						_dummy = BIS_FD_accGrp createUnit [""Logic"", [10, 10, 10], [], 0, ""NONE""];" \n
                         "						_dummy enableSimulation false;" \n
                         "						_dummy hideObject true;" \n
                         "						_center = getArray (_zone >> ""center"");" \n
                         "						_dummy attachTo [_targetObject, _center];" \n
                         "" \n
                         "						//TODO: remove debug" \n
                         "						/*" \n
                         "						private [""_decal""];" \n
                         "						_decal = ""Skeet_Clay_F"" createVehicle (getPosASL _dummy);" \n
                         "						_decal setPosASL (getPosASL _dummy);" \n
                         "						_decal enableSimulation false;" \n
                         "						*/" \n
                         "" \n
                         "						_zoneDummies set [count _zoneDummies, _dummy];" \n
                         "						_zoneDistances set [count _zoneDistances, getArray (_zone >> ""maxDistances"")];" \n
                         "						_zoneBonuses set [count _zoneBonuses, getArray (_zone >> ""bonuses"")];" \n
                         "					};" \n
                         "					" \n
                         "					_targetObject setVariable [""zoneDummies"", _zoneDummies];" \n
                         "					_targetObject setVariable [""zoneDistances"", _zoneDistances];" \n
                         "					_targetObject setVariable [""zoneBonuses"", _zoneBonuses];" \n
                         "				};" \n
                         "				" \n
                         "				//Fetch no-shoot status" \n
                         "				private [""_noShoot""];" \n
                         "				_noShoot = getNumber (_target >> ""noShoot"");" \n
                         "				_targetObject setVariable [""noShoot"", _noShoot];" \n
                         "" \n
                         "				//Fetch optional status and associated bonus" \n
                         "				private [""_optional"", ""_bonus""];" \n
                         "				_optional = getNumber (_target >> ""optional"");" \n
                         "				_targetObject setVariable [""optional"", _optional];" \n
                         "				_bonus = getNumber (_target >> ""bonus"");" \n
                         "				_targetObject setVariable [""bonus"", _bonus];" \n
                         "				//Optional targets should be CoF color" \n
                         "				if (_optional == 1) then " \n
                         "				{				" \n
                         "					_targetObject setObjectTexture [0, ""#(argb,8,8,3)color("" + (str (BIS_FD_color select 0)) + "","" + (str (BIS_FD_color select 1)) + "","" + (str (BIS_FD_color select 2)) + "",1.0,co)""];" \n
                         "				};" \n
                         "				" \n
                         "				//Fetch and set random position" \n
                         "				private [""_positions"", ""_directions""];" \n
                         "				_positions = getArray (_target >> ""positions"");" \n
                         "				_directions = getArray (_target >> ""directions"");" \n
                         "				" \n
                         "				if ((count _positions) == (count _directions)) then " \n
                         "				{" \n
                         "					if ((count _positions) > 0) then " \n
                         "					{" \n
                         "						private [""_index"", ""_dir"", ""_pos""];" \n
                         "						_index = _positions call BIS_fnc_randomIndex;" \n
                         "" \n
                         "						_dir = _directions select _index;" \n
                         "						_targetObject setDir ((markerDir _dir) + 180);" \n
                         "" \n
                         "						_pos = _positions select _index; //TODO: currently only supports markers" \n
                         "						_pos = markerPos _pos;" \n
                         "						if (!_ASL) then " \n
                         "						{" \n
                         "							_targetObject setPos _pos;" \n
                         "						} " \n
                         "						else " \n
                         "						{" \n
                         "							_pos set [2, (getPosASL _targetObject) select 2];" \n
                         "							_targetObject setPosASL _pos;" \n
                         "						};" \n
                         "					};" \n
                         "				};" \n
                         "" \n
                         "				//To be able to reset" \n
                         "				if (!_ASL) then " \n
                         "				{" \n
                         "					_targetObject setVariable [""position"", position _targetObject]; " \n
                         "				} " \n
                         "				else " \n
                         "				{" \n
                         "					_targetObject setVariable [""position"", getPosASL _targetObject];" \n
                         "				};" \n
                         "" \n
                         "				_targetObject setVariable [""direction"", direction _targetObject];" \n
                         "			" \n
                         "				private [""_marker"", ""_colorTargetMarker"", ""_typeMarker""];" \n
                         "				_marker = createMarker [""BIS_FD_CPTargetMarker"" + (str (count BIS_FD_CPTargetMarkers)), position _targetObject];" \n
                         "				BIS_FD_CPTargetMarkers set [count BIS_FD_CPTargetMarkers, _marker];" \n
                         "				" \n
                         "				_colorTargetMarker = ""ColorOPFOR"";" \n
                         "				_typeMarker = ""mil_circle"";" \n
                         "				if (_noShoot == 1) then " \n
                         "				{" \n
                         "					_colorTargetMarker = ""ColorCivilian"";" \n
                         "					_typeMarker = ""mil_warning"";" \n
                         "				};" \n
                         "				if (_optional == 1) then " \n
                         "				{" \n
                         "					_colorTargetMarker = _colorMarker;" \n
                         "					_typeMarker = ""mil_dot"";" \n
                         "				};" \n
                         "				BIS_FD_CPTargetMarkerTypes set [count BIS_FD_CPTargetMarkerTypes, _typeMarker];" \n
                         "				" \n
                         "				_marker setMarkerColor _colorTargetMarker;" \n
                         "				_marker setMarkerType _typeMarker;" \n
                         "				_marker setMarkerSize [0.4, 0.4];" \n
                         "				_marker setMarkerAlpha 0;" \n
                         "				_targetMarkers set [count _targetMarkers, _marker];" \n
                         "				_targetObject setVariable [""marker"", _marker];" \n
                         "				" \n
                         "				_targets set [count _targets, _targetObject];				" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				_targetObject hideObject true;" \n
                         "				_targetObject enableSimulation false;" \n
                         "				_targetObject setVariable [""spawned"", false];" \n
                         "			};" \n
                         "		};" \n
                         "		" \n
                         "		_cpObject setVariable [""targets"", _targets];" \n
                         "		_cpObject setVariable [""targetMarkers"", _targetMarkers];" \n
                         "" \n
                         "		private [""_heightCheck""];" \n
                         "		_heightCheck = """";" \n
                         "		if (_height != 0) then " \n
                         "		{" \n
                         "			_cpObject setPosASL [(position _cpObject) select 0, (position _cpObject) select 1, _height];" \n
                         "			_heightCheck = ""&& ((abs (((getPosASL BIS_FD_Competitor) select 2) - "" + (str _height) + "")) < 1)"";" \n
                         "		};" \n
                         "" \n
                         "		//Make CPs execute appropriate events on enter / exit" \n
                         "		_cpObject setTriggerActivation [""NONE"", ""PRESENT"", true];" \n
                         "		_cpObject triggerAttachVehicle [BIS_FD_Competitor];" \n
                         "		_cpObject setTriggerStatements [""(BIS_FD_Competitor in thisList)"" + _heightCheck, ""thisTrigger call BIS_fnc_moduleFDCPIn"", ""thisTrigger call BIS_fnc_moduleFDCPOut""];" \n
                         "		" \n
                         "		//Spawn CP marker" \n
                         "		private [""_marker""];" \n
                         "		_marker = createMarker [""BIS_FD_CPMarker"" + (str (count BIS_FD_CPMarkers)), position _cpObject];" \n
                         "		BIS_FD_CPMarkers set [count BIS_FD_CPMarkers, _marker];" \n
                         "		_marker setMarkerColor _colorMarker;" \n
                         "		_marker setMarkerType ""mil_marker"";" \n
                         "		_marker setMarkerSize [1, 1];" \n
                         "		" \n
                         "		if (_i == 0) then " \n
                         "		{" \n
                         "			_marker setMarkerText _name;" \n
                         "		} " \n
                         "		else " \n
                         "		{" \n
                         "			if (_i < ((count _cps) - 1)) then " \n
                         "			{" \n
                         "				_marker setMarkerText (str _i);" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				_marker setMarkerText (localize ""STR_A3_FIRING_DRILLS_IGUI_3D_FINISH"");" \n
                         "			};" \n
                         "		};" \n
                         "		" \n
                         "		_marker setMarkerAlpha 0;" \n
                         "		_cpObject setVariable [""marker"", _marker];" \n
                         "		" \n
                         "		//Spawn CP zone marker" \n
                         "		_marker = createMarker [""BIS_FD_CPAreaMarker"" + (str (count BIS_FD_CPAreaMarkers)), position _cpObject];" \n
                         "		BIS_FD_CPAreaMarkers set [count BIS_FD_CPAreaMarkers, _marker];" \n
                         "		_marker setMarkerColor _colorMarker;" \n
                         "" \n
                         "		private [""_triggerArea"", ""_size"", ""_angle"", ""_rectangle""];" \n
                         "		_triggerArea = triggerArea _cpObject;" \n
                         "		_size = [_triggerArea select 0, _triggerArea select 1];" \n
                         "		_angle = _triggerArea select 2;" \n
                         "		_rectangle = _triggerArea select 3;" \n
                         "		_marker setMarkerSize _size;" \n
                         "		_marker setMarkerDir _angle;" \n
                         "		_marker setMarkerShape (if (_rectangle) then {""RECTANGLE""} else {""ELLIPSE""});" \n
                         "		_marker setMarkerAlpha 0;" \n
                         "		_cpObject setVariable [""markerArea"", _marker];" \n
                         "		" \n
                         "		private [""_shootingBoxMarkers""];" \n
                         "		_shootingBoxMarkers = _cpObject getVariable [""markersShootingBox"", []];" \n
                         "		" \n
                         "		//Spawn shooting box markers" \n
                         "		{" \n
                         "			_marker = createMarker [""BIS_FD_CPShootingBoxMarker"" + (str (count BIS_FD_CPShootingBoxMarkers)), position _cpObject];" \n
                         "			BIS_FD_CPShootingBoxMarkers set [count BIS_FD_CPShootingBoxMarkers, _marker];" \n
                         "			_marker setMarkerColor _colorMarker;" \n
                         "" \n
                         "			_triggerArea = triggerArea _x;" \n
                         "			_size = [_triggerArea select 0, _triggerArea select 1];" \n
                         "			_angle = _triggerArea select 2;" \n
                         "			_rectangle = _triggerArea select 3;" \n
                         "			_marker setMarkerSize _size;" \n
                         "			_marker setMarkerDir _angle;" \n
                         "			_marker setMarkerShape (if (_rectangle) then {""RECTANGLE""} else {""ELLIPSE""});" \n
                         "			_marker setMarkerBrush ""SolidBorder"";" \n
                         "			_marker setMarkerAlpha 0;" \n
                         "			_shootingBoxMarkers set [count _shootingBoxMarkers, _marker];" \n
                         "		} forEach _shootingBoxes;" \n
                         "		" \n
                         "		_cpObject setVariable [""markersShootingBox"", _shootingBoxMarkers];" \n
                         "		" \n
                         "		BIS_FD_CPs set [count BIS_FD_CPs, _cpObject];" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "//TODO: Temporary rule selection mechanism" \n
                         "BIS_FD_rule1 = 0; //CPs" \n
                         "BIS_FD_rule2 = 0; //Target Randomization" \n
                         "BIS_FD_rule3 = 0; //Weapons Used" \n
                         "BIS_FD_rule4 = 0; //Positions" \n
                         "BIS_FD_rule5 = 0; //Stances" \n
                         "BIS_FD_rule6 = 0; //Guidance" \n
                         "BIS_FD_ruleSet = -1;" \n
                         "BIS_FD_ruleSelect = true;" \n
                         "BIS_FD_ruleChange = false;" \n
                         "" \n
                         "BIS_FD_ruleSetTraining = getArray (_cfgFD >> ""RuleSets"" >> ""training"");" \n
                         "BIS_FD_ruleSetCompetitive = getArray (_cfgFD >> ""RuleSets"" >> ""competitive"");" \n
                         "" \n
                         "//Configure restart selector targets" \n
                         "private [""_restartSelectors"", ""_hitCode""];" \n
                         "BIS_FD_restartSelectors = [];" \n
                         "_restartSelectors = getArray (_cfgFD >> ""restartSelectors"");" \n
                         "" \n
                         "_hitCode = " \n
                         "{" \n
                         "	private [""_selection""];" \n
                         "	_selection = (_this select 0) select 5;" \n
                         "" \n
                         "	if ((""target"" in _selection) || (""pole_bottom"" in _selection)) then " \n
                         "	{" \n
                         "		if (BIS_FD_phase == 2) then " \n
                         "		{" \n
                         "			if (!BIS_FD_restart) then " \n
                         "			{" \n
                         "				BIS_FD_restart = true;" \n
                         "				" \n
                         "				{" \n
                         "					_x animate [""Target_Bottom_Rotate"", 1];" \n
                         "					_x animate [""Bottom_Rotate"", 1];" \n
                         "					_x say ""FD_Target_PopDown_Small_F"";" \n
                         "				} forEach BIS_FD_restartSelectors;" \n
                         "			};" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "{" \n
                         "	private [""_object""];" \n
                         "	_object = call (compile _x);" \n
                         "	_object animate [""Target_Bottom_Rotate"", 1];" \n
                         "	_object animate [""Bottom_Rotate"", 1];" \n
                         "	_object addEventHandler [""hitPart"", _hitCode];" \n
                         "	BIS_FD_restartSelectors set [count BIS_FD_restartSelectors, _object];" \n
                         "} forEach _restartSelectors;" \n
                         "" \n
                         "//Configure quit selector targets" \n
                         "private [""_quitSelectors""];" \n
                         "BIS_FD_quitSelectors = [];" \n
                         "_quitSelectors = getArray (_cfgFD >> ""quitSelectors"");" \n
                         "" \n
                         "_hitCode = " \n
                         "{" \n
                         "	private [""_selection""];" \n
                         "	_selection = (_this select 0) select 5;" \n
                         "" \n
                         "	if ((""target"" in _selection) || (""pole_bottom"" in _selection)) then " \n
                         "	{" \n
                         "		if (!BIS_FD_ending) then " \n
                         "		{" \n
                         "			BIS_FD_ending = true;" \n
                         "			" \n
                         "			{" \n
                         "				_x animate [""Target_Bottom_Rotate"", 1];" \n
                         "				_x animate [""Bottom_Rotate"", 1];" \n
                         "				_x say ""FD_Target_PopDown_Small_F"";" \n
                         "			} forEach BIS_FD_quitSelectors;" \n
                         "" \n
                         "			hintSilent """";" \n
                         "			RscFiringDrillTime_done = true;" \n
                         "			RscFiringDrillCheckpoint_done = true;" \n
                         "" \n
                         "			[""end1""] call BIS_fnc_endMission;" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "{" \n
                         "	private [""_object""];" \n
                         "	_object = call (compile _x);" \n
                         "	_object addEventHandler [""hitPart"", _hitCode];" \n
                         "	BIS_FD_quitSelectors set [count BIS_FD_quitSelectors, _object];" \n
                         "} forEach _quitSelectors;" \n
                         "" \n
                         "//Configure rule-set selector targets" \n
                         "private [""_ruleSelectors""];" \n
                         "BIS_FD_ruleSelectors = [];" \n
                         "_ruleSelectors = getArray (_cfgFD >> ""ruleSelectors"");" \n
                         "{" \n
                         "	private [""_object""];" \n
                         "	_object = call (compile _x);" \n
                         "	BIS_FD_ruleSelectors set [count BIS_FD_ruleSelectors, _object];" \n
                         "} forEach _ruleSelectors;" \n
                         "" \n
                         "private [""_ruleTarget1"", ""_ruleTarget2""];" \n
                         "_ruleTarget1 = BIS_FD_ruleSelectors select 0;" \n
                         "_ruleTarget2 = BIS_FD_ruleSelectors select 1;" \n
                         "" \n
                         "_hitCode = " \n
                         "{" \n
                         "	private [""_target"", ""_selection""];" \n
                         "	_target = (_this select 0) select 0;" \n
                         "	_selection = (_this select 0) select 5;" \n
                         "" \n
                         "	if (BIS_FD_ruleSelect && ((""target"" in _selection) || (""pole_bottom"" in _selection))) then " \n
                         "	{" \n
                         "		if (_target == (BIS_FD_ruleSelectors select 0)) then " \n
                         "		{" \n
                         "			if (BIS_FD_ruleSet in [-1, 1]) then " \n
                         "			{" \n
                         "				_target animate [""Target_Bottom_Rotate"", 1];" \n
                         "				_target animate [""Bottom_Rotate"", 1];" \n
                         "				_target say ""FD_Target_PopDown_Small_F"";" \n
                         "				(BIS_FD_ruleSelectors select 1) animate [""Target_Bottom_Rotate"", 0];" \n
                         "				(BIS_FD_ruleSelectors select 1) animate [""Bottom_Rotate"", 0];" \n
                         "				(BIS_FD_ruleSelectors select 1) say ""FD_Target_PopUp_Small_F"";" \n
                         "" \n
                         "				if (BIS_FD_ruleSet != -1) then {BIS_FD_ruleChange = true;};" \n
                         "				" \n
                         "				BIS_FD_ruleSet = 0;" \n
                         "				BIS_FD_rule1 = BIS_FD_ruleSetTraining select 0;" \n
                         "				BIS_FD_rule2 = BIS_FD_ruleSetTraining select 1;" \n
                         "				BIS_FD_rule3 = BIS_FD_ruleSetTraining select 2;" \n
                         "				BIS_FD_rule4 = BIS_FD_ruleSetTraining select 3;" \n
                         "				BIS_FD_rule5 = BIS_FD_ruleSetTraining select 4;" \n
                         "				BIS_FD_rule6 = BIS_FD_ruleSetTraining select 5;" \n
                         "" \n
                         "				[""Rules"", ""Firing_Drills"", [[[""ROF"", 3], [""ROF"", 4]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				BIS_FD_quickStart = true;" \n
                         "			};" \n
                         "		};" \n
                         "		" \n
                         "		if (_target == (BIS_FD_ruleSelectors select 1)) then " \n
                         "		{" \n
                         "			if (BIS_FD_ruleSet in [-1, 0]) then " \n
                         "			{" \n
                         "				_target animate [""Target_Bottom_Rotate"", 1];" \n
                         "				_target animate [""Bottom_Rotate"", 1];" \n
                         "				_target say ""FD_Target_PopDown_Small_F"";" \n
                         "				(BIS_FD_ruleSelectors select 0) animate [""Target_Bottom_Rotate"", 0];" \n
                         "				(BIS_FD_ruleSelectors select 0) animate [""Bottom_Rotate"", 0];" \n
                         "				(BIS_FD_ruleSelectors select 0) say ""FD_Target_PopUp_Small_F"";" \n
                         "" \n
                         "				if (BIS_FD_ruleSet != -1) then {BIS_FD_ruleChange = true;};" \n
                         "				" \n
                         "				BIS_FD_ruleSet = 1;" \n
                         "				BIS_FD_rule1 = BIS_FD_ruleSetCompetitive select 0;" \n
                         "				BIS_FD_rule2 = BIS_FD_ruleSetCompetitive select 1;" \n
                         "				BIS_FD_rule3 = BIS_FD_ruleSetCompetitive select 2;" \n
                         "				BIS_FD_rule4 = BIS_FD_ruleSetCompetitive select 3;" \n
                         "				BIS_FD_rule5 = BIS_FD_ruleSetCompetitive select 4;" \n
                         "				BIS_FD_rule6 = BIS_FD_ruleSetCompetitive select 5;" \n
                         "" \n
                         "				[""Rules"", ""Firing_Drills"", [[[""ROF"", 5], [""ROF"", 6]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "			}" \n
                         "			else " \n
                         "			{" \n
                         "				BIS_FD_quickStart = true;" \n
                         "			};" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "_ruleTarget1 addEventHandler [""hitPart"", _hitCode];" \n
                         "_ruleTarget2 addEventHandler [""hitPart"", _hitCode];" \n
                         "" \n
                         "BIS_rangeOfficer setIdentity ""PB_B_RangeOfficer"";" \n
                         "(group BIS_rangeOfficer) setGroupID [localize ""STR_A3_Firing_Drills_Range""];" \n
                         "" \n
                         "private [""_cfgFiringDrills""];" \n
                         "_cfgFiringDrills = configFile >> ""CfgFiringDrills"";" \n
                         "BIS_FD_pointTimeMulti = getNumber (_cfgFiringDrills >> ""pointTimeMultiplier"");" \n
                         "BIS_FD_bonusPoints = [getNumber (_cfgFiringDrills >> ""bonusWeapon""), getNumber (_cfgFiringDrills >> ""bonusShootingBox""), getNumber (_cfgFiringDrills >> ""bonusStance""), 0, 0]; //Last are bonus targets and accuracy bonuses" \n
                         "BIS_FD_penaltyPoints = [getNumber (_cfgFiringDrills >> ""penaltyWeapon""), getNumber (_cfgFiringDrills >> ""penaltyShootingBox""), getNumber (_cfgFiringDrills >> ""penaltyStance""), getNumber (_cfgFiringDrills >> ""penaltyNoShoot""), getNumber (_cfgFiringDrills >> ""penaltyMissed"")];" \n
                         "" \n
                         "private [""_colorsMedals""];" \n
                         "_colorsMedals = getArray (_cfgFiringDrills >> ""colorsMedals"");" \n
                         "BIS_FD_colorBronze = _colorsMedals select 0;" \n
                         "BIS_FD_colorSilver = _colorsMedals select 1;" \n
                         "BIS_FD_colorGold = _colorsMedals select 2;" \n
                         "" \n
                         "private [""_iconsMedals""];" \n
                         "_iconsMedals = getArray (_cfgFiringDrills >> ""iconsMedals"");" \n
                         "BIS_FD_iconBronze = _iconsMedals select 0;" \n
                         "BIS_FD_iconSilver = _iconsMedals select 1;" \n
                         "BIS_FD_iconGold = _iconsMedals select 2;" \n
                         "" \n
                         "BIS_FD_FF_detected = false;" \n
                         "BIS_FD_FF =" \n
                         "{" \n
                         "	private[""_source"", ""_victim""];" \n
                         "	_source = _this select 3;" \n
                         "	_victim = _this select 0;" \n
                         "" \n
                         "	if (!BIS_FD_FF_detected) then" \n
                         "	{" \n
                         "		if (_source in [vehicle BIS_FD_competitor, BIS_FD_competitor]) then" \n
                         "		{" \n
                         "			BIS_FD_FF_detected = true;" \n
                         "" \n
                         "			{" \n
                         "				_x setCaptive true;" \n
                         "				_x allowDamage false;" \n
                         "				_x enableSimulation false;" \n
                         "			} forEach [vehicle BIS_FD_competitor, BIS_FD_competitor];" \n
                         "" \n
                         "			titleText [localize ""STR_A3_Mission_Failed_Friendly_Fire"", ""PLAIN""];" \n
                         "" \n
                         "			[""BIS_FD"", ""FAILED""] call BIS_fnc_taskSetState;" \n
                         "" \n
                         "			sleep 2;" \n
                         "" \n
                         "			titleCut ["""", ""BLACK OUT"", 1];" \n
                         "" \n
                         "			sleep 4;" \n
                         "" \n
                         "			[""end2"", false, 0] call BIS_fnc_endMission;" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "{_x addEventHandler [""HandleDamage"", {_this spawn BIS_FD_FF; _this select 2}]} forEach (allUnits - [BIS_FD_Competitor]);" \n
                         "" \n
                         "BIS_FD_competitor createDiarySubject [""BIS_FD"", localize ""STR_A3_FIRING_DRILLS_DIARY_SUBJECT_TITLE""];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC9_TITLE""," \n
                         "		format [localize ""STR_A3_FIRING_DRILLS_DIARY_REC9_TEXT"", ""<img image='A3\Ui_f\data\IGUI\RscIngameUI\RscHint\indent_square' />""]" \n
                         "	]" \n
                         "];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC8_TITLE""," \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC8_TEXT""" \n
                         "	]" \n
                         "];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC7_TITLE""," \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC7_TEXT""" \n
                         "	]" \n
                         "];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC6_TITLE""," \n
                         "		format [localize ""STR_A3_FIRING_DRILLS_DIARY_REC6_TEXT"", ""<img image='A3\Ui_f\data\IGUI\RscIngameUI\RscHint\indent_square' />""]" \n
                         "	]" \n
                         "];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC5_TITLE""," \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC5_TEXT""" \n
                         "	]" \n
                         "];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC4_TITLE""," \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC4_TEXT""" \n
                         "	]" \n
                         "];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC3_TITLE""," \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC3_TEXT""" \n
                         "	]" \n
                         "];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC2_TITLE""," \n
                         "		format [localize ""STR_A3_FIRING_DRILLS_DIARY_REC2_TEXT"", ""<img image='A3\Ui_f\data\IGUI\RscIngameUI\RscHint\indent_square' />""]" \n
                         "	]" \n
                         "];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC1_TITLE""," \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_REC1_TEXT""" \n
                         "	]" \n
                         "];" \n
                         "" \n
                         "BIS_FD_competitor createDiaryRecord " \n
                         "[" \n
                         "	""Diary""," \n
                         "	[" \n
                         "		localize ""STR_A3_FIRING_DRILLS_DIARY_TITLE""," \n
                         "		format [localize ""STR_A3_FIRING_DRILLS_DIARY_TEXT1"", _name, createDiaryLink [""BIS_FD"", BIS_FD_competitor, localize ""STR_A3_FIRING_DRILLS_DIARY_TEXT2""]]" \n
                         "	]" \n
                         "];"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Always">*/
                                class Always
                                {
                                        itemno = 2;
                                        priority = 0.000000;
                                        to="Init2";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Init2">*/
                class Init2
                {
                        name = "Init2";
                        itemno = 4;
                        init = /*%FSM<STATEINIT""">*/"private [""_hitCode""];" \n
                         "_hitCode = " \n
                         "{" \n
                         "	private [""_target"", ""_hitVelocity"", ""_selection"", ""_direct"", ""_noShoot""];" \n
                         "	_target = (_this select 0) select 0;" \n
                         "	_hitVelocity = (_this select 0) select 4;" \n
                         "	_selection = (_this select 0) select 5;" \n
                         "	_direct = (_this select 0) select 10;" \n
                         "	_noShoot = _target getVariable [""noShoot"", 0];" \n
                         "	_hitSelections = _target getVariable [""selectionsHit"", []];" \n
                         "" \n
                         "	if ((_target getVariable [""state"", -1]) == 2) then " \n
                         "	{" \n
                         "		if (((count _hitSelections) == 0) || (({_x in _selection} count _hitSelections) > 0)) then " \n
                         "		{" \n
                         "			private [""_feedbackGiven"", ""_marker""];" \n
                         "			_feedbackGiven = false;" \n
                         "			_marker = _target getVariable [""marker"", """"];" \n
                         "			_marker setMarkerType ""mil_objective"";" \n
                         "" \n
                         "			_target setVariable [""timeHit"", time];" \n
                         "			_target setVariable [""state"", 3];" \n
                         "" \n
                         "			if (_noShoot == 0) then " \n
                         "			{	" \n
                         "				BIS_FD_engaged set [count BIS_FD_engaged, 1];" \n
                         "				" \n
                         "				private [""_targetCP"", ""_targetCPObj""];" \n
                         "				_targetCP = _target getVariable [""CP"", 1];" \n
                         "				_targetCPObj = BIS_FD_CPs select (_targetCP - 1);" \n
                         "" \n
                         "				private [""_dist""];" \n
                         "				_dist = BIS_FD_Competitor distance _target;" \n
                         "				if (_direct && (_dist > 100)) then " \n
                         "				{" \n
                         "					if (!_feedbackGiven) then " \n
                         "					{" \n
                         "						if ((random 1) >= 0.8) then " \n
                         "						{" \n
                         "							[""Positive"", ""Firing_Drills"", [[[""ROF"", 1], [""ROF"", 2]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "							_feedbackGiven = true;" \n
                         "						} " \n
                         "						else " \n
                         "						{" \n
                         "							[""Neutral"", ""Firing_Drills"", [[""ROF"", 0], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "							_feedbackGiven = true;" \n
                         "						};" \n
                         "					};" \n
                         "				} " \n
                         "				else " \n
                         "				{" \n
                         "					if (((random 1) >= 0.9) && !_feedbackGiven && _direct) then " \n
                         "					{" \n
                         "						[""Positive"", ""Firing_Drills"", [[""ROF"", 0], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "						_feedbackGiven = true;" \n
                         "					};" \n
                         "				};" \n
                         "				" \n
                         "				private [""_bonus""];" \n
                         "				_bonus = _target getVariable [""bonus"", 0];" \n
                         "				if ((_bonus > 0) && _direct) then " \n
                         "				{" \n
                         "					private [""_bonusPoints""];" \n
                         "					_bonusPoints = BIS_FD_bonusPoints select 3;" \n
                         "					_bonusPoints = _bonusPoints + _bonus;" \n
                         "					BIS_FD_bonusPoints set [3, _bonusPoints];" \n
                         "" \n
                         "					if (!_feedbackGiven) then " \n
                         "					{" \n
                         "						[""MiscRC"", ""Firing_Drills"", [[[""ROF"", 4], [""ROF"", 5], [""ROF"", 6], [""ROF"", 7]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "						_feedbackGiven = true;" \n
                         "					};" \n
                         "" \n
                         "					BIS_FD_bonuses set [count BIS_FD_bonuses, 3];" \n
                         "				};" \n
                         "				" \n
                         "				//Accuracy zones" \n
                         "				private [""_zoneDummies""];" \n
                         "				_zoneDummies = _target getVariable [""zoneDummies"", []];" \n
                         "				if ((count _zoneDummies) > 0) then " \n
                         "				{" \n
                         "					//Find nearest zone" \n
                         "					private [""_shotPos"", ""_distToZones"", ""_closestZone"", ""_distZone""];" \n
                         "					_shotPos = (_this select 0) select 3;" \n
                         "					//TODO: optimize in single loop					" \n
                         "					_distToZones = [];" \n
                         "					{" \n
                         "						_distToZones set [count _distToZones, (getPosASL _x) distance _shotPos];" \n
                         "					} forEach _zoneDummies;" \n
                         "					" \n
                         "					_closestZone = 0;" \n
                         "					_distZone = _distToZones select 0;" \n
                         "					" \n
                         "					{" \n
                         "						if (_x < _distZone) then " \n
                         "						{" \n
                         "							_closestZone = _forEachIndex;" \n
                         "							_distZone = _x;" \n
                         "						};" \n
                         "					} forEach _distToZones;" \n
                         "" \n
                         "					//TODO: remove debug" \n
                         "					//_closestZone call BIS_fnc_log;" \n
                         "					//_distZone call BIS_fnc_log;" \n
                         "					/*" \n
                         "					private [""_decal""];" \n
                         "					_decal = ""Steel_Plate_S_F"" createVehicle _shotPos;" \n
                         "					_decal setPosASL _shotPos;" \n
                         "					_decal enableSimulation false;" \n
                         "					*/" \n
                         "" \n
                         "					private [""_accuracyBonus"", ""_zoneBonuses""];" \n
                         "					_accuracyBonus = 0;" \n
                         "					_zoneBonuses = (_target getVariable [""zoneBonuses"", []]) select _closestZone;" \n
                         "					" \n
                         "					{" \n
                         "						if (_distZone <= _x) then {_accuracyBonus = _zoneBonuses select _forEachIndex;};" \n
                         "					} forEach ((_target getVariable [""zoneDistances"", []]) select _closestZone);" \n
                         "					" \n
                         "					//_accuracyBonus call BIS_fnc_log;" \n
                         "					if ((_accuracyBonus > 0) && _direct) then " \n
                         "					{" \n
                         "						private [""_bonusPoints""];" \n
                         "						_bonusPoints = BIS_FD_bonusPoints select 4;" \n
                         "						_bonusPoints = _bonusPoints + _accuracyBonus;" \n
                         "						BIS_FD_bonusPoints set [4, _bonusPoints];" \n
                         "" \n
                         "						BIS_FD_bonuses set [count BIS_FD_bonuses, 4];" \n
                         "						" \n
                         "						if (!_feedbackGiven) then " \n
                         "						{" \n
                         "							if (_accuracyBonus >= 10) then " \n
                         "							{" \n
                         "								[""MiscRC"", ""Firing_Drills"", [[""ROF"", 0], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "							} " \n
                         "							else " \n
                         "							{" \n
                         "								if (((random 1) >= 0.5) || (_accuracyBonus >= 6)) then " \n
                         "								{" \n
                         "									[""MiscRC"", ""Firing_Drills"", [[[""ROF"", 1], [""ROF"", 2], [""ROF"", 3]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "								};" \n
                         "							};" \n
                         "						" \n
                         "							_feedbackGiven = true;" \n
                         "						};" \n
                         "" \n
                         "						if (((random 1) >= 0.95) && (_accuracyBonus >= 8) && !_feedbackGiven) then " \n
                         "						{" \n
                         "							[""MiscRC"", ""Firing_Drills"", [[""ROF"", 18], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "							_feedbackGiven = true;" \n
                         "						};" \n
                         "					};" \n
                         "				};" \n
                         "" \n
                         "				if (BIS_FD_rule1 != 0) then " \n
                         "				{" \n
                         "					private [""_cpWeapon"", ""_cpWeaponsMatched""];" \n
                         "					_cpWeapons = _targetCPObj getVariable ""weapons"";" \n
                         "					_cpWeaponsMatched = ((count _cpWeapons) == 0) || ((currentWeapon BIS_FD_competitor) in _cpWeapons);" \n
                         "					" \n
                         "					/*if ((BIS_FD_rule3 == 1) && _cpWeaponsMatched) then " \n
                         "					{" \n
                         "						BIS_FD_bonuses set [count BIS_FD_bonuses, 0];" \n
                         "					};*/" \n
                         "					" \n
                         "					if (/*(BIS_FD_rule3 == 2) && */!_cpWeaponsMatched) then " \n
                         "					{" \n
                         "						BIS_FD_penalties set [count BIS_FD_penalties, 0];" \n
                         "					};" \n
                         "					" \n
                         "					private [""_cpShootBoxes"", ""_cpShootBoxesMatched""];" \n
                         "					_cpShootingBoxes = _targetCPObj getVariable ""shootingBoxes"";" \n
                         "					_cpShootingBoxesMatched = false;" \n
                         "					{" \n
                         "						if (BIS_FD_competitor in (list _x)) exitWith {_cpShootingBoxesMatched = true;};" \n
                         "					} forEach _cpShootingBoxes;" \n
                         "					" \n
                         "					/*if ((BIS_FD_rule4 == 1) && _cpShootingBoxesMatched) then " \n
                         "					{" \n
                         "						BIS_FD_bonuses set [count BIS_FD_bonuses, 1];" \n
                         "					};*/" \n
                         "					" \n
                         "					if (/*(BIS_FD_rule4 == 2) && */(!_cpShootingBoxesMatched && !((count _cpShootingBoxes) == 0))) then " \n
                         "					{" \n
                         "						BIS_FD_penalties set [count BIS_FD_penalties, 1];" \n
                         "					};" \n
                         "					" \n
                         "					private [""_cpStances"", ""_cpStancesMatched""];" \n
                         "					_cpStances = _targetCPObj getVariable ""stances"";" \n
                         "					if ((count _cpStances) > 0) then " \n
                         "					{" \n
                         "						_cpStancesMatched = false;" \n
                         "					" \n
                         "						{" \n
                         "							private [""_stance""];" \n
                         "							_stance = stance BIS_FD_competitor;" \n
                         "							if ((_x == ""prone"") && (_stance == ""PRONE"")) exitWith {_cpStancesMatched = true;};" \n
                         "							if ((_x == ""crouch"") && (_stance == ""CROUCH"")) exitWith {_cpStancesMatched = true;};" \n
                         "							if ((_x == ""stand"") && (_stance == ""STAND"")) exitWith {_cpStancesMatched = true;};" \n
                         "						} forEach _cpStances;" \n
                         "					} " \n
                         "					else " \n
                         "					{" \n
                         "						_cpStancesMatched = true;" \n
                         "					};" \n
                         "					" \n
                         "					/*if ((BIS_FD_rule5 == 1) && _cpStancesMatched) then " \n
                         "					{" \n
                         "						BIS_FD_bonuses set [count BIS_FD_bonuses, 2];" \n
                         "					};*/" \n
                         "					" \n
                         "					if (/*(BIS_FD_rule5 == 2) && */!_cpStancesMatched) then " \n
                         "					{" \n
                         "						BIS_FD_penalties set [count BIS_FD_penalties, 2];" \n
                         "					};" \n
                         "				};" \n
                         "" \n
                         "				if ((_target getVariable [""optional"", 0]) == 1) then " \n
                         "				{" \n
                         "					_marker setMarkerAlpha 1;" \n
                         "				};" \n
                         "" \n
                         "				_target call BIS_fnc_moduleFDCPClear;" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				BIS_FD_penalties set [count BIS_FD_penalties, 3];" \n
                         "				" \n
                         "				//TODO: GUI message" \n
                         "" \n
                         "				[""Negative"", ""Firing_Drills"", [[[""ROF"", 0], [""ROF"", 1], [""ROF"", 2], [""ROF"", 3]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "			};" \n
                         "			" \n
                         "			[_target, _hitVelocity] spawn " \n
                         "			{" \n
                         "				private [""_target"", ""_downTime"", ""_onHit""];" \n
                         "				_target = _this select 0;" \n
                         "				_downTime = _target getVariable [""downTime"", 0];" \n
                         "				_onHit = _target getVariable [""onHit"", """"];" \n
                         "				if (_onHit != """") then " \n
                         "				{" \n
                         "					sleep _downTime;" \n
                         "					" \n
                         "					private [""_handle""]; " \n
                         "					_handle = _this execVM _onHit;" \n
                         "				};" \n
                         "			};" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "//Set up all targets" \n
                         "//TODO: move down so it is merged with reset more?" \n
                         "{" \n
                         "	{" \n
                         "		_x addEventHandler [""hitPart"", _hitCode];" \n
                         "		_x setVariable [""state"", 0];" \n
                         "		" \n
                         "		private [""_onReset""];" \n
                         "		_onReset = _x getVariable [""onReset"", """"];" \n
                         "		if (_onReset != """") then {private [""_handle""]; _handle = [_x] execVM _onReset;};" \n
                         "	} forEach (_x getVariable [""targets"", []]);" \n
                         "} forEach BIS_FD_CPs;" \n
                         "" \n
                         "_timeNow = time;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "No_CPs">*/
                                class No_CPs
                                {
                                        itemno = 34;
                                        priority = 1.000000;
                                        to="End_1";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(count BIS_FD_CPs) == 0"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "___5s">*/
                                class ___5s
                                {
                                        itemno = 36;
                                        priority = 0.000000;
                                        to="Wait_to_enter_St";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(time - _timeNow) > 0.5"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Ready">*/
                class Ready
                {
                        name = "Ready";
                        itemno = 6;
                        init = /*%FSM<STATEINIT""">*/"//Default back-up" \n
                         "if (BIS_FD_ruleSet == -1) then " \n
                         "{" \n
                         "	BIS_FD_ruleSet = 0;" \n
                         "	BIS_FD_rule1 = BIS_FD_ruleSetTraining select 0;" \n
                         "	BIS_FD_rule2 = BIS_FD_ruleSetTraining select 1;" \n
                         "	BIS_FD_rule3 = BIS_FD_ruleSetTraining select 2;" \n
                         "	BIS_FD_rule4 = BIS_FD_ruleSetTraining select 3;" \n
                         "	BIS_FD_rule5 = BIS_FD_ruleSetTraining select 4;" \n
                         "	BIS_FD_rule6 = BIS_FD_ruleSetTraining select 5;" \n
                         "" \n
                         "	(BIS_FD_ruleSelectors select 0) animate [""Target_Bottom_Rotate"", 1];" \n
                         "	(BIS_FD_ruleSelectors select 0) animate [""Bottom_Rotate"", 1];" \n
                         "	(BIS_FD_ruleSelectors select 0) say ""FD_Target_PopDown_Small_F"";" \n
                         "" \n
                         "	[""Rules"", ""Firing_Drills"", [[[""ROF"", 3], [""ROF"", 4]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "};" \n
                         "" \n
                         "//Load stats" \n
                         "private [""_stats""];" \n
                         "_stats = profileNamespace getVariable [_preFix + (str BIS_FD_ruleSet), [-1, -1]];" \n
                         "BIS_FD_timePrevious = _stats select 0;" \n
                         "if (BIS_FD_timePrevious != -1) then " \n
                         "{" \n
                         "	BIS_FD_timePreviousText = [BIS_FD_timePrevious, ""MM:SS.MS""] call BIS_fnc_secondsToString;" \n
                         "	" \n
                         "	//TODO: consolidate into one function?" \n
                         "	private [""_color"", ""_icon""];" \n
                         "	if (BIS_FD_ruleSet == 1) then " \n
                         "	{" \n
                         "		if (BIS_FD_timePrevious <= BIS_FD_timeSpecial) then " \n
                         "		{" \n
                         "			_color = BIS_FD_colorSpecial;" \n
                         "			_icon = BIS_FD_iconSpecial;" \n
                         "		} " \n
                         "		else " \n
                         "		{	" \n
                         "			if (BIS_FD_timePrevious <= BIS_FD_timeGold) then " \n
                         "			{" \n
                         "				_color = BIS_FD_colorGold;" \n
                         "				_icon = BIS_FD_iconGold;" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				if (BIS_FD_timePrevious <= BIS_FD_timeSilver) then " \n
                         "				{" \n
                         "					_color = BIS_FD_colorSilver;" \n
                         "					_icon = BIS_FD_iconSilver;" \n
                         "				} " \n
                         "				else " \n
                         "				{" \n
                         "					if (BIS_FD_timePrevious <= BIS_FD_timeBronze) then " \n
                         "					{" \n
                         "						_color = BIS_FD_colorBronze;" \n
                         "						_icon = BIS_FD_iconBronze;" \n
                         "					} " \n
                         "					else " \n
                         "					{" \n
                         "						_color = BIS_FD_colorHTML;" \n
                         "						_icon = ""A3\Modules_F_Beta\data\FiringDrills\medal_none_ca"";" \n
                         "					};" \n
                         "				};" \n
                         "			};" \n
                         "		};" \n
                         "	} " \n
                         "	else " \n
                         "	{" \n
                         "		_color = BIS_FD_colorHTML;" \n
                         "		_icon = """";" \n
                         "	};" \n
                         "" \n
                         "	BIS_FD_timePreviousText = ""<t color='"" + _color + ""'>"" + BIS_FD_timePreviousText + "" <img image='"" + _icon + ""' /></t>"";" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	BIS_FD_timePreviousText = ""<t color='"" + BIS_FD_colorTextHTML + ""'>--:--<t size='0.8'>.---</t>"";" \n
                         "	" \n
                         "	if (BIS_FD_ruleSet == 1) then " \n
                         "	{" \n
                         "		BIS_FD_timePreviousText = BIS_FD_timePreviousText + "" <img image='A3\Modules_F_Beta\data\FiringDrills\medal_none_ca' />"";" \n
                         "	};" \n
                         "};" \n
                         "BIS_FD_timeBest = _stats select 1;" \n
                         "if (BIS_FD_timeBest != -1) then " \n
                         "{" \n
                         "	BIS_FD_timeBestText = [BIS_FD_timeBest, ""MM:SS.MS""] call BIS_fnc_secondsToString;" \n
                         "" \n
                         "	setStatValue [(""Completed"" + _stat), 1]; //Update Steam stat for Achievements - completed with any time" \n
                         "	" \n
                         "	//TODO: consolidate into one function?" \n
                         "	private [""_color"", ""_icon""];" \n
                         "	if (BIS_FD_ruleSet == 1) then " \n
                         "	{" \n
                         "		if (BIS_FD_timeBest <= BIS_FD_timeSpecial) then " \n
                         "		{" \n
                         "			_color = BIS_FD_colorSpecial;" \n
                         "			_icon = BIS_FD_iconSpecial;" \n
                         "		} " \n
                         "		else " \n
                         "		{	" \n
                         "			if (BIS_FD_timeBest <= BIS_FD_timeGold) then " \n
                         "			{" \n
                         "				_color = BIS_FD_colorGold;" \n
                         "				_icon = BIS_FD_iconGold;" \n
                         "" \n
                         "				setStatValue [(""CompletedBronze"" + _stat), 1]; //Update Steam stat for Achievements - completed at Bronze" \n
                         "				setStatValue [(""CompletedSilver"" + _stat), 1]; //Update Steam stat for Achievements - completed at Silver" \n
                         "				setStatValue [(""CompletedGold"" + _stat), 1]; //Update Steam stat for Achievements - completed at Gold" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				if (BIS_FD_timeBest <= BIS_FD_timeSilver) then " \n
                         "				{" \n
                         "					_color = BIS_FD_colorSilver;" \n
                         "					_icon = BIS_FD_iconSilver;" \n
                         "" \n
                         "					setStatValue [(""CompletedBronze"" + _stat), 1]; //Update Steam stat for Achievements - completed at Bronze" \n
                         "					setStatValue [(""CompletedSilver"" + _stat), 1]; //Update Steam stat for Achievements - completed at Silver" \n
                         "				} " \n
                         "				else " \n
                         "				{" \n
                         "					if (BIS_FD_timeBest <= BIS_FD_timeBronze) then " \n
                         "					{" \n
                         "						_color = BIS_FD_colorBronze;" \n
                         "						_icon = BIS_FD_iconBronze;" \n
                         "" \n
                         "						setStatValue [(""CompletedBronze"" + _stat), 1]; //Update Steam stat for Achievements - completed at Bronze" \n
                         "					} " \n
                         "					else " \n
                         "					{" \n
                         "						_color = BIS_FD_colorHTML;" \n
                         "						_icon = ""A3\Modules_F_Beta\data\FiringDrills\medal_none_ca"";" \n
                         "					};" \n
                         "				};" \n
                         "			};" \n
                         "		};" \n
                         "	} " \n
                         "	else " \n
                         "	{" \n
                         "		_color = BIS_FD_colorHTML;" \n
                         "		_icon = """";" \n
                         "	};" \n
                         "" \n
                         "	BIS_FD_timeBestText = ""<t color='"" + _color + ""'>"" + BIS_FD_timeBestText + "" <img image='"" + _icon + ""' /></t>"";" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	BIS_FD_timeBestText = ""<t color='"" + BIS_FD_colorTextHTML + ""'>--:--<t size='0.8'>.---</t>"";" \n
                         "	" \n
                         "	if (BIS_FD_ruleSet == 1) then " \n
                         "	{" \n
                         "		BIS_FD_timeBestText = BIS_FD_timeBestText + "" <img image='A3\Modules_F_Beta\data\FiringDrills\medal_none_ca' />"";" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "//Welcome message" \n
                         "private [""_text""];" \n
                         "_text = ""<t align='left' color='"" + BIS_FD_colorTextHTML + ""'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_READY"") + ""<br /><br />"";" \n
                         "if (BIS_FD_ruleSet == 0) then {_text = _text + ""<t color='"" + BIS_FD_colorHTML + ""'>"" + (toUpper (localize ""STR_A3_FIRING_DRILLS_HINT_RULES2"")) + ""</t>"";};" \n
                         "if (BIS_FD_ruleSet == 1) then " \n
                         "{" \n
                         "	_text = _text + ""<t color='"" + BIS_FD_colorHTML + ""'>"" + (toUpper (localize ""STR_A3_FIRING_DRILLS_HINT_RULES3"")) + ""</t>"";" \n
                         "" \n
                         "	//Medals" \n
                         "	//TODO: support no medal times being defined?" \n
                         "	_text = _text + ""<br />"";" \n
                         "	_text = _text + ""<t color='"" + BIS_FD_colorBronze  + ""'>"" + _timeBronzeText + "" <img image='"" + BIS_FD_iconBronze + ""' /></t><br />"";" \n
                         "	_text = _text + ""<t color='"" + BIS_FD_colorSilver  + ""'>"" + _timeSilverText + "" <img image='"" + BIS_FD_iconSilver + ""' /></t><br />"";" \n
                         "	_text = _text + ""<t color='"" + BIS_FD_colorGold  + ""'>"" + _timeGoldText + "" <img image='"" + BIS_FD_iconGold + ""' /></t>"";" \n
                         "" \n
                         "	if (BIS_FD_timeSpecial != -1) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + _nameSpecial + "": <t color='"" + BIS_FD_colorSpecial  + ""'>"" + _timeSpecialText + "" <img image='"" + BIS_FD_iconSpecial + ""' /></t>"";" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "//Statistics" \n
                         "_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_TIME_BEST"") + "" "" + BIS_FD_timeBestText ;" \n
                         "_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_TIME_PREVIOUS"") + "" "" + BIS_FD_timePreviousText;" \n
                         "" \n
                         "//Rules" \n
                         "_text = _text + ""<br /><br />"";" \n
                         "_text = _text + ""<t  size='0.8'>"" + (localize ""STR_A3_FIRING_DRILLS_RULE1"") + "" "" + (switch (BIS_FD_rule1) do {case 0: {localize ""STR_A3_FIRING_DRILLS_RULE_OFF""}; case 1: {localize ""STR_A3_FIRING_DRILLS_RULE_NORMAL""}; case 2: {localize ""STR_A3_FIRING_DRILLS_RULE_STRICT""}});" \n
                         "_text = _text + ""<br />"";" \n
                         "_text = _text + (localize ""STR_A3_FIRING_DRILLS_RULE2"") + "" "" + (switch (BIS_FD_rule2) do {case 0: {localize ""STR_A3_FIRING_DRILLS_RULE_OFF""}; case 1: {localize ""STR_A3_FIRING_DRILLS_RULE_NORMAL""}; case 2: {localize ""STR_A3_FIRING_DRILLS_RULE_HEAVY""}});" \n
                         "if (BIS_FD_rule1 != 0) then " \n
                         "{" \n
                         "	_text = _text + ""<br />"";" \n
                         "	_text = _text + (localize ""STR_A3_FIRING_DRILLS_RULE3"") + "" "" + (switch (BIS_FD_rule3) do {case 0: {localize ""STR_A3_FIRING_DRILLS_RULE_OFF""}; case 1: {localize ""STR_A3_FIRING_DRILLS_RULE_NORMAL""}; case 2: {localize ""STR_A3_FIRING_DRILLS_RULE_STRICT""}});" \n
                         "	_text = _text + ""<br />"";" \n
                         "	_text = _text + (localize ""STR_A3_FIRING_DRILLS_RULE4"") + "" "" + (switch (BIS_FD_rule4) do {case 0: {localize ""STR_A3_FIRING_DRILLS_RULE_OFF""}; case 1: {localize ""STR_A3_FIRING_DRILLS_RULE_NORMAL""}; case 2: {localize ""STR_A3_FIRING_DRILLS_RULE_STRICT""}});" \n
                         "	_text = _text + ""<br />"";" \n
                         "	_text = _text + (localize ""STR_A3_FIRING_DRILLS_RULE5"") + "" "" + (switch (BIS_FD_rule5) do {case 0: {localize ""STR_A3_FIRING_DRILLS_RULE_OFF""}; case 1: {localize ""STR_A3_FIRING_DRILLS_RULE_NORMAL""}; case 2: {localize ""STR_A3_FIRING_DRILLS_RULE_STRICT""}});" \n
                         "};" \n
                         "_text = _text + ""<br />"";" \n
                         "_text = _text + (localize ""STR_A3_FIRING_DRILLS_RULE6"") + "" "" + (switch (BIS_FD_rule6) do {case 0: {localize ""STR_A3_FIRING_DRILLS_RULE_FULL""}; case 1: {localize ""STR_A3_FIRING_DRILLS_RULE_NORMAL""}; case 2: {localize ""STR_A3_FIRING_DRILLS_RULE_IMMERSIVE""}});" \n
                         "_text = _text + ""</t></t>"";" \n
                         "" \n
                         "hintSilent (parseText _text);" \n
                         "" \n
                         "if (BIS_FD_ruleChange) then " \n
                         "{" \n
                         "	BIS_FD_ruleChange = false;" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	//Too often said in a wrong place after quick-start" \n
                         "	//[""Timing"", ""Firing_Drills"", [[[""ROF"", 0], [""ROF"", 1]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "};" \n
                         "" \n
                         "_timeNow = time;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Rules_changed">*/
                                class Rules_changed
                                {
                                        itemno = 22;
                                        priority = 1.000000;
                                        to="Rules_changed";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ruleChange"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "__0s_OR_Quick_st">*/
                                class __0s_OR_Quick_st
                                {
                                        itemno = 15;
                                        priority = 0.000000;
                                        to="Countdown";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"((time - _timeNow) > 10) " \n
                                         "|| " \n
                                         "BIS_FD_quickStart"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Go">*/
                class Go
                {
                        name = "Go";
                        itemno = 7;
                        init = /*%FSM<STATEINIT""">*/"hintSilent (parseText (""<t align='left' color='"" + BIS_FD_colorHTML + ""'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_STARTED"") + ""</t>""));" \n
                         "" \n
                         "[""Timing"", ""Firing_Drills"", [[""ROF"", 4], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "" \n
                         "playSound ""FD_Start_F"";" \n
                         "" \n
                         "BIS_FD_freezePlayer = false;" \n
                         "" \n
                         "BIS_FD_phase = 2;" \n
                         "" \n
                         "BIS_FD_bonuses = [];" \n
                         "BIS_FD_penalties = [];" \n
                         "BIS_FD_engaged = [];" \n
                         "" \n
                         "{" \n
                         "	{" \n
                         "		//Determine trigger chance" \n
                         "		if ((random 1) <= (_x getVariable [""triggerChance"", 1])) then " \n
                         "		{" \n
                         "			_x setVariable [""triggerActive"", true];" \n
                         "		};" \n
                         "		" \n
                         "		//Re-position random targets" \n
                         "		private [""_positions""];" \n
                         "		_positions = _x getVariable [""positions"", []];" \n
                         "		if ((count _positions) > 0) then " \n
                         "		{" \n
                         "			if (!(_x getVariable [""BIS_DynO_ASL"", false])) then " \n
                         "			{" \n
                         "				_x setPos (_positions call BIS_fnc_selectRandom);" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				_x setPosASL (_positions call BIS_fnc_selectRandom);" \n
                         "			};" \n
                         "		};" \n
                         "	} forEach (_x getVariable ""targets"");" \n
                         "} forEach BIS_FD_CPs;" \n
                         "" \n
                         "_this spawn " \n
                         "{" \n
                         "	private [""_medalNow""];" \n
                         "	_medalNow = if (BIS_FD_timeSpecial != -1) then {0} else {1};" \n
                         "" \n
                         "	while {(BIS_FD == 0) && !BIS_FD_reset && !BIS_FD_ended && !BIS_FD_ending} do " \n
                         "	{" \n
                         "		private [""_timeNow"", ""_timeNowFormat"", ""_text"", ""_textCurrent"", ""_textPrevious"", ""_textBest"", ""_textBonus"", ""_textPenalty""];" \n
                         "		_timeNow = time - BIS_FD_startTime;" \n
                         "		_timeNowFormat = [_timeNow, ""MM:SS.MS"", true] call BIS_fnc_secondsToString;" \n
                         "" \n
                         "		_text = ""<t align='left' color='"" + BIS_FD_colorTextHTML + ""'>"";" \n
                         "" \n
                         "		_textCurrent = """";" \n
                         "		_textPrevious = """";" \n
                         "		_textBest = """";" \n
                         "		_textBonus = """";" \n
                         "		_textPenalty = """";" \n
                         "		" \n
                         "		//TODO: nicer algo" \n
                         "		private [""_bonusWeapon"", ""_bonusShootingBox"", ""_bonusStance"", ""_bonusTargets"", ""_bonusAccuracy"", ""_bonus"", ""_penaltyWeapon"", ""_penaltyShootingBox"", ""_penaltyStance"", ""_penaltyNoShoot"", ""_penaltyMissed"", ""_penalty""];" \n
                         "		_bonusWeapon = {_x == 0} count BIS_FD_bonuses;" \n
                         "		_bonusShootingBox = {_x == 1} count BIS_FD_bonuses;" \n
                         "		_bonusStance = {_x == 2} count BIS_FD_bonuses;" \n
                         "		_bonusTargets = {_x == 3} count BIS_FD_bonuses;" \n
                         "		_bonusAccuracy = {_x == 3} count BIS_FD_bonuses;" \n
                         "		_bonus = (_bonusWeapon * (BIS_FD_bonusPoints select 0)) + " \n
                         "		(_bonusShootingBox * (BIS_FD_bonusPoints select 1)) + " \n
                         "		(_bonusStance * (BIS_FD_bonusPoints select 2)) + " \n
                         "		(BIS_FD_bonusPoints select 3) + " \n
                         "		(BIS_FD_bonusPoints select 4);" \n
                         "		_penaltyWeapon = {_x == 0} count BIS_FD_penalties;" \n
                         "		_penaltyShootingBox = {_x == 1} count BIS_FD_penalties;" \n
                         "		_penaltyStance = {_x == 2} count BIS_FD_penalties;" \n
                         "		_penaltyNoShoot = {_x == 3} count BIS_FD_penalties;" \n
                         "		_penaltyMissed = {_x == 4} count BIS_FD_penalties;" \n
                         "		_penalty = (_penaltyWeapon * (BIS_FD_penaltyPoints select 0)) + " \n
                         "		(_penaltyShootingBox * (BIS_FD_penaltyPoints select 1)) + " \n
                         "		(_penaltyStance * (BIS_FD_penaltyPoints select 2)) + " \n
                         "		(_penaltyNoShoot * (BIS_FD_penaltyPoints select 3)) + " \n
                         "		(_penaltyMissed * (BIS_FD_penaltyPoints select 4));" \n
                         "		" \n
                         "		if (BIS_FD_rule6 != 2) then " \n
                         "		{" \n
                         "			private [""_timeNowConsolidated"", ""_colorCurrent"", ""_iconCurrent""];" \n
                         "			_timeNowConsolidated = (_timeNow - (_bonus * BIS_FD_pointTimeMulti) + (_penalty * BIS_FD_pointTimeMulti)) max 0;" \n
                         "			_colorCurrent = BIS_FD_colorTextHTML;" \n
                         "			_iconCurrent = ""A3\Modules_F_Beta\data\FiringDrills\timer_ca"";" \n
                         "			if (BIS_FD_ruleSet == 1) then " \n
                         "			{" \n
                         "				if (_timeNowConsolidated <= BIS_FD_timeSpecial) then " \n
                         "				{" \n
                         "					_colorCurrent = BIS_FD_colorSpecial;" \n
                         "					_iconCurrent = BIS_FD_iconSpecial;" \n
                         "				} " \n
                         "				else " \n
                         "				{	" \n
                         "					if (_timeNowConsolidated <= BIS_FD_timeGold) then " \n
                         "					{" \n
                         "						_colorCurrent = BIS_FD_colorGold;" \n
                         "						_iconCurrent = BIS_FD_iconGold;" \n
                         "						" \n
                         "						if (_medalNow != 1) then {playSound ""FD_Timer_F""; _medalNow = 1;};" \n
                         "					} " \n
                         "					else " \n
                         "					{" \n
                         "						if (_timeNowConsolidated <= BIS_FD_timeSilver) then " \n
                         "						{" \n
                         "							_colorCurrent = BIS_FD_colorSilver;" \n
                         "							_iconCurrent = BIS_FD_iconSilver;" \n
                         "" \n
                         "							if (_medalNow != 2) then {playSound ""FD_Timer_F""; _medalNow = 2;};" \n
                         "						} " \n
                         "						else " \n
                         "						{" \n
                         "							if (_timeNowConsolidated <= BIS_FD_timeBronze) then " \n
                         "							{" \n
                         "								_colorCurrent = BIS_FD_colorBronze;" \n
                         "								_iconCurrent = BIS_FD_iconBronze;" \n
                         "" \n
                         "								if (_medalNow != 3) then {playSound ""FD_Timer_F""; _medalNow = 3;};" \n
                         "							} " \n
                         "							else " \n
                         "							{" \n
                         "								if (_medalNow != 4) then {playSound ""FD_Timer_F""; _medalNow = 4;};" \n
                         "							};" \n
                         "						};" \n
                         "					};" \n
                         "				};" \n
                         "			};" \n
                         "		" \n
                         "			_textCurrent = _textCurrent + ""<t color='"" + _colorCurrent + ""'>"";" \n
                         "			_textCurrent = _textCurrent + ""<img image='"" + _iconCurrent + ""' /> "";" \n
                         "			_textCurrent = _textCurrent + (format [""%1:%2<t size='0.8'>.%3</t>"", _timeNowFormat select 0, _timeNowFormat select 1, _timeNowFormat select 2]);" \n
                         "			_textCurrent = _textCurrent + ""</t>"";" \n
                         "		};" \n
                         "" \n
                         "		_text  = _text + _textCurrent;" \n
                         "" \n
                         "		_textBonus = _textBonus + ""<t color='"" + BIS_FD_colorHTML + ""'>"";" \n
                         "		if (_bonus != 0) then {_textBonus = _textBonus + ""-"";};" \n
                         "		_textBonus = _textBonus + (str (_bonus * BIS_FD_pointTimeMulti)) + ""s</t>"";" \n
                         "		_text = _text + ""<br />"" + _textBonus;" \n
                         "" \n
                         "		_textPenalty = _textPenalty + ""<t color='"" + BIS_FD_colorWarningHTML + ""'>"";" \n
                         "		if (_penalty != 0) then {_textPenalty = _textPenalty + ""+"";};" \n
                         "		_textPenalty = _textPenalty + (str (_penalty * BIS_FD_pointTimeMulti)) + ""s</t>"";" \n
                         "		_text = _text + ""<br />"" + _textPenalty;" \n
                         "" \n
                         "		RscFiringDrillTime_bonus = parseText (""<t size='0.6'>"" + _textBonus + ""</t>"");" \n
                         "		RscFiringDrillTime_penalty = parseText (""<t size='0.6'>"" + _textPenalty + ""</t>"");" \n
                         "" \n
                         "		_text = _text + ""</t>"";" \n
                         "" \n
                         "		_text = _text + ""<br />"";" \n
                         "" \n
                         "		if (BIS_FD_timeBestText != """") then " \n
                         "		{" \n
                         "			_textBest = _textBest + (localize ""STR_A3_FIRING_DRILLS_HINT_TIME_BEST"") + "" "" + BIS_FD_timeBestText" \n
                         "		} " \n
                         "		else " \n
                         "		{" \n
                         "			_textBest = _textBest + (localize ""STR_A3_FIRING_DRILLS_HINT_TIME_BEST"") + "" <img image='A3\Modules_F_Beta\data\FiringDrills\medal_none_ca' /> --:--<t size='0.8'>.---</t>"";" \n
                         "		};" \n
                         "		_textBest = ""<t size='0.6'>"" + _textBest + ""</t>"";" \n
                         "" \n
                         "		if (BIS_FD_timePreviousText != """") then " \n
                         "		{" \n
                         "			_textPrevious = _textPrevious + (localize ""STR_A3_FIRING_DRILLS_HINT_TIME_PREVIOUS"") + "" "" + BIS_FD_timePreviousText" \n
                         "		} " \n
                         "		else " \n
                         "		{" \n
                         "			_textPrevious = _textPrevious + (localize ""STR_A3_FIRING_DRILLS_HINT_TIME_PREVIOUS"") + "" <img image='A3\Modules_F_Beta\data\FiringDrills\medal_none_ca' /> --:--<t size='0.8'>.---</t>"";" \n
                         "		};" \n
                         "		_textPrevious = ""<t size='0.6'>"" + _textPrevious + ""</t>"";" \n
                         "" \n
                         "		_text = _text + ""<br />"" + _textBest;" \n
                         "		_text = _text + ""<br />"" + _textPrevious;" \n
                         "		_text = _text + ""</t>"";" \n
                         "" \n
                         "		_text = _text + ""</t>"";" \n
                         "" \n
                         "		RscFiringDrillTime_current = parsetext _textCurrent;" \n
                         "		RscFiringDrillTime_best = parsetext _textBest;" \n
                         "		RscFiringDrillTime_previous = parsetext _textPrevious;" \n
                         "		sleep 0.01;" \n
                         "	};" \n
                         "	" \n
                         "	if (BIS_FD_reset) then " \n
                         "	{" \n
                         "		RscFiringDrillTime_done = true;" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "//If Competitive, hide all CP markers but the start and #1" \n
                         "//TODO: link to guidance?" \n
                         "{" \n
                         "	if (_forEachIndex != 0) then " \n
                         "	{	" \n
                         "		[_x, 0] spawn BIS_fnc_moduleFDFadeMarker;" \n
                         "	};" \n
                         "} forEach BIS_FD_CPAreaMarkers;" \n
                         "" \n
                         "{" \n
                         "	if (_forEachIndex > 0) then " \n
                         "	{" \n
                         "		if (BIS_FD_ruleSet == 1) then " \n
                         "		{" \n
                         "			switch _forEachIndex do " \n
                         "			{" \n
                         "				case 0: {[_x, 0.8] spawn BIS_fnc_moduleFDFadeMarker;};" \n
                         "				case 1: {[_x, 1] spawn BIS_fnc_moduleFDFadeMarker;};" \n
                         "				default {[_x, 0] spawn BIS_fnc_moduleFDFadeMarker;};" \n
                         "			};" \n
                         "		} " \n
                         "		else " \n
                         "		{" \n
                         "			switch _forEachIndex do " \n
                         "			{" \n
                         "				case 0: {[_x, 0.8] spawn BIS_fnc_moduleFDFadeMarker;};" \n
                         "				case 1: {[_x, 1] spawn BIS_fnc_moduleFDFadeMarker;};" \n
                         "			};" \n
                         "		};" \n
                         "	};" \n
                         "} forEach BIS_FD_CPMarkers;" \n
                         "" \n
                         "//Pop up the restart selector targets" \n
                         "{" \n
                         "	_x animate [""Target_Bottom_Rotate"", 0];" \n
                         "	_x animate [""Bottom_Rotate"", 0];" \n
                         "} forEach BIS_FD_restartSelectors;" \n
                         "" \n
                         "BIS_FD_startTime = time;" \n
                         "" \n
                         "if (BIS_FD_rule1 != 0) then " \n
                         "{" \n
                         "	BIS_FD_iconGrp = createGroup civilian;" \n
                         "	BIS_FD_icon = BIS_FD_iconGrp createUnit [""Logic"", [10, 10, 10], [], 0, ""NONE""];" \n
                         "" \n
                         "	BIS_FD_icon enableSimulation false;" \n
                         "	BIS_FD_icon hideObject true;" \n
                         "" \n
                         "	BIS_FD_iconGrp addGroupIcon [""badge"", [0, 0]];" \n
                         "	BIS_FD_iconGrp setGroupIconParams [[0, 0, 0, 0], """", 0, false];" \n
                         "" \n
                         "	BIS_FD_activeCP = 1;" \n
                         "	BIS_FD_activeCPObj = BIS_FD_CPs select (BIS_FD_activeCP - 1);" \n
                         "	BIS_FD_nextCP = 2;" \n
                         "	BIS_FD_nextCPObj = BIS_FD_CPs select (BIS_FD_nextCP - 1);" \n
                         "" \n
                         "	private [""_posASL""];" \n
                         "	_posASL = getPosASL BIS_FD_nextCPObj;" \n
                         "	_posASL set [2, (_posASL select 2) - 2.3];" \n
                         "	BIS_FD_icon setPosASL _posASL;" \n
                         "" \n
                         "	_this spawn " \n
                         "	{" \n
                         "		private [""_color1"", ""_color2"", ""_colorStepR"", ""_colorStepG"", ""_colorStepB"", ""_colorUp"", ""_colorCnt"", ""_color""];" \n
                         "		_color1 = +BIS_FD_colorText;" \n
                         "		_color2 = +BIS_FD_color;" \n
                         "		_colorStepR = (abs ((_color1 select 0) - (_color2 select 0))) / 25;" \n
                         "		_colorStepG = (abs ((_color1 select 1) - (_color2 select 1))) / 25;" \n
                         "		_colorStepB = (abs ((_color1 select 2) - (_color2 select 2))) / 25;" \n
                         "		_colorUp = false;" \n
                         "		_colorCnt = 0;" \n
                         "		_color = +_color1;" \n
                         "		" \n
                         "		while {(BIS_FD == 0) && !BIS_FD_reset && !BIS_FD_ended && !BIS_FD_ending} do " \n
                         "		{" \n
                         "			private [""_dist"", ""_alpha"", ""_size""];" \n
                         "" \n
                         "			//Allow player control over visibility via Game Difficulty in real-time" \n
                         "			if (difficultyEnabled ""hudWp"") then " \n
                         "			{" \n
                         "				_dist = BIS_FD_Competitor distance BIS_FD_nextCPObj;" \n
                         "				_alpha = (([[0, 5], _dist, [0.3, 1]] call BIS_fnc_linearConversion) min 1) max 0.3;" \n
                         "				_size = (([[0, 25], _dist, [1, 1.5]] call BIS_fnc_linearConversion) min 1.5) max 1;" \n
                         "" \n
                         "				if (_colorUp) then " \n
                         "				{" \n
                         "					_color set [0, (_color select 0) + _colorStepR];" \n
                         "					_color set [1, (_color select 1) + _colorStepG];" \n
                         "					_color set [2, (_color select 2) + _colorStepB];" \n
                         "				} " \n
                         "				else " \n
                         "				{" \n
                         "					_color set [0, (_color select 0) - _colorStepR];" \n
                         "					_color set [1, (_color select 1) - _colorStepG];" \n
                         "					_color set [2, (_color select 2) - _colorStepB];" \n
                         "				};" \n
                         "				" \n
                         "				_colorCnt = _colorCnt + 1;" \n
                         "				if (_colorCnt >= 24) then {_colorUp = !_colorUp; _colorCnt = 0;};" \n
                         "				" \n
                         "				_color set [3, _alpha];" \n
                         "" \n
                         "				if (BIS_FD_nextCP < (count BIS_FD_CPs)) then " \n
                         "				{" \n
                         "					BIS_FD_iconGrp setGroupIconParams [_color, str (BIS_FD_nextCP - 1), _size, true];" \n
                         "				} " \n
                         "				else " \n
                         "				{" \n
                         "					BIS_FD_iconGrp setGroupIconParams [_color, localize ""STR_A3_FIRING_DRILLS_IGUI_3D_FINISH"", _size, true];" \n
                         "				};" \n
                         "				" \n
                         "				sleep 0.01;" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				BIS_FD_iconGrp setGroupIconParams [[0, 0, 0, 0], """", 0, false];" \n
                         "			};" \n
                         "		};" \n
                         "		" \n
                         "		deleteVehicle BIS_FD_icon;" \n
                         "		deleteGroup BIS_FD_iconGrp;" \n
                         "	};" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Died_">*/
                                class Died_
                                {
                                        itemno = 49;
                                        priority = 7.000000;
                                        to="Died";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(alive BIS_FD_Competitor)"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Cheat_">*/
                                class Cheat_
                                {
                                        itemno = 47;
                                        priority = 6.000000;
                                        to="Cheat";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"accTime != 1"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Returned_to_start">*/
                                class Returned_to_start
                                {
                                        itemno = 21;
                                        priority = 0.000000;
                                        to="Returned_start_C";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(BIS_FD_Competitor in (list _cpStart))" \n
                                         "&& " \n
                                         "BIS_FD_started"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Exited_COF">*/
                                class Exited_COF
                                {
                                        itemno = 20;
                                        priority = 0.000000;
                                        to="Exited_COF";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(BIS_FD_Competitor in (list (BIS_FD_Object getVariable ""courseOfFire"")))"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Esc___Restart_OR">*/
                                class Esc___Restart_OR
                                {
                                        itemno = 19;
                                        priority = 0.000000;
                                        to="Restart";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_restart"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Ended">*/
                                class Ended
                                {
                                        itemno = 16;
                                        priority = 0.000000;
                                        to="Finish";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ended"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Exited_COF">*/
                class Exited_COF
                {
                        name = "Exited_COF";
                        itemno = 8;
                        init = /*%FSM<STATEINIT""">*/"BIS_FD = -1;" \n
                         "BIS_FD_reset = true;" \n
                         "BIS_FD_phase = -1;" \n
                         "" \n
                         "_timeNow = time;" \n
                         "" \n
                         "hintSilent (parseText (""<t align='left' color='"" + BIS_FD_colorTextHTML + ""'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_EXIT_COF"") + ""</t>""));" \n
                         "" \n
                         "[""Misc"", ""Firing_Drills"", [[""ROF"", 4], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "" \n
                         "private [""_resultText""];" \n
                         "_resultText = ""<t color='"" + BIS_FD_colorTextHTML + ""'>--:--<t size='0.8'>.---</t>"";" \n
                         "if (BIS_FD_ruleSet == 1) then {_resultText = _resultText + "" <img image='A3\Modules_F_Beta\data\FiringDrills\medal_none_ca' />""};" \n
                         "" \n
                         "BIS_FD_sessionTimes set [count BIS_FD_sessionTimes, _resultText];" \n
                         "" \n
                         "titleCut ["""", ""BLACK OUT"", 1.5];"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "___5s">*/
                                class ___5s
                                {
                                        itemno = 25;
                                        priority = 0.000000;
                                        to="Reset";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(time - _timeNow) > 1.5"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Restarting">*/
                class Restarting
                {
                        name = "Restarting";
                        itemno = 9;
                        init = /*%FSM<STATEINIT""">*/"BIS_FD_reset = true;" \n
                         "BIS_FD_restart = false;" \n
                         "BIS_FD_phase = -1;" \n
                         "" \n
                         "_timeNow = time;" \n
                         "" \n
                         "RscFiringDrillTime_done = true;" \n
                         "RscFiringDrillCheckpoint_done = true;" \n
                         "" \n
                         "hintSilent (parseText (""<t align='left' color='"" + BIS_FD_colorTextHTML + ""'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESTART"") + ""</t>""));" \n
                         "" \n
                         "[""Misc"", ""Firing_Drills"", [[[""ROF"", 3], [""ROF"", 5]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "" \n
                         "titleCut ["""", ""BLACK OUT"", 1.5];"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "___5s">*/
                                class ___5s
                                {
                                        itemno = 25;
                                        priority = 0.000000;
                                        to="Reset";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(time - _timeNow) > 1.5"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Finish">*/
                class Finish
                {
                        name = "Finish";
                        itemno = 10;
                        init = /*%FSM<STATEINIT""">*/"//Check for activated but missed targets and add penalties" \n
                         "{" \n
                         "	private [""_targets""];	" \n
                         "	_targets = _x getVariable [""targets"", []];" \n
                         "	{" \n
                         "		private [""_marker""];" \n
                         "		_marker = _x getVariable [""marker"", """"];" \n
                         "" \n
                         "		//All targets must have been activated and engaged (or missed)" \n
                         "		if (((_x getVariable [""state"", -1]) in [1, 2]) && ((_x getVariable [""noShoot"", 0]) != 1) && ((_x getVariable [""optional"", 0]) != 1)) then " \n
                         "		{" \n
                         "			BIS_FD_penalties set [count BIS_FD_penalties, 4];" \n
                         "" \n
                         "			_marker setMarkerType ""waypoint"";" \n
                         "			_marker setMarkerSize [0.6, 0.6];" \n
                         "		};" \n
                         "" \n
                         "		//Show target results for debriefing" \n
                         "		if (_x getVariable [""triggerActive"", false]) then " \n
                         "		{" \n
                         "			[_marker, 0.6] spawn BIS_fnc_moduleFDFadeMarker;" \n
                         "		};" \n
                         "	} forEach _targets;" \n
                         "} forEach BIS_FD_CPs;" \n
                         "" \n
                         "playSound ""FD_Finish_F"";" \n
                         "" \n
                         "private [""_timeFinish""];" \n
                         "_timeFinish = (time - BIS_FD_startTime) max 0;" \n
                         "" \n
                         "_timeNow = time;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "__s">*/
                                class __s
                                {
                                        itemno = 17;
                                        priority = 0.000000;
                                        to="Results";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(time - _timeNow) > 1"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Results">*/
                class Results
                {
                        name = "Results";
                        itemno = 11;
                        init = /*%FSM<STATEINIT""">*/"private [""_bonusWeapon"", ""_bonusShootingBox"", ""_bonusStance"", ""_bonusTargets"", ""_bonusAccuracy"", ""_bonus"", ""_penaltyWeapon"", ""_penaltyShootingBox"", ""_penaltyStance"", ""_penaltyNoShoot"", ""_penaltyMissed"", ""_penalty""];" \n
                         "_bonusWeapon = {_x == 0} count BIS_FD_bonuses;" \n
                         "_bonusShootingBox = {_x == 1} count BIS_FD_bonuses;" \n
                         "_bonusStance = {_x == 2} count BIS_FD_bonuses;" \n
                         "_bonusTargets = {_x == 3} count BIS_FD_bonuses;" \n
                         "_bonusAccuracy = {_x == 4} count BIS_FD_bonuses;" \n
                         "_bonus = (_bonusWeapon * (BIS_FD_bonusPoints select 0)) + " \n
                         "(_bonusShootingBox * (BIS_FD_bonusPoints select 1)) + " \n
                         "(_bonusStance * (BIS_FD_bonusPoints select 2)) + " \n
                         "(BIS_FD_bonusPoints select 3) + " \n
                         "(BIS_FD_bonusPoints select 4);" \n
                         "_penaltyWeapon = {_x == 0} count BIS_FD_penalties;" \n
                         "_penaltyShootingBox = {_x == 1} count BIS_FD_penalties;" \n
                         "_penaltyStance = {_x == 2} count BIS_FD_penalties;" \n
                         "_penaltyNoShoot = {_x == 3} count BIS_FD_penalties;" \n
                         "_penaltyMissed = {_x == 4} count BIS_FD_penalties;" \n
                         "_penalty = (_penaltyWeapon * (BIS_FD_penaltyPoints select 0)) + " \n
                         "(_penaltyShootingBox * (BIS_FD_penaltyPoints select 1)) + " \n
                         "(_penaltyStance * (BIS_FD_penaltyPoints select 2)) + " \n
                         "(_penaltyNoShoot * (BIS_FD_penaltyPoints select 3)) + " \n
                         "(_penaltyMissed * (BIS_FD_penaltyPoints select 4));" \n
                         "" \n
                         "private [""_timeFinishFormat"", ""_text"", ""_feedbackProvided""];" \n
                         "_timeFinishFormat = [_timeFinish, ""MM:SS.MS"", true] call BIS_fnc_secondsToString;" \n
                         "" \n
                         "_text = ""<t align='left' color='"" + BIS_FD_colorTextHTML + ""'>"";" \n
                         "_text = _text + format [(localize ""STR_A3_FIRING_DRILLS_HINT_TIME_RAW"") + "" %1:%2<t size='0.8'>.%3</t>"", _timeFinishFormat select 0, _timeFinishFormat select 1, _timeFinishFormat select 2];" \n
                         "" \n
                         "_feedbackProvided = false;" \n
                         "" \n
                         "if (_bonus != 0) then " \n
                         "{" \n
                         "	_text = _text + ""<br /><t size='0.8'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_BONUS"");" \n
                         "	" \n
                         "	if (_bonusWeapon != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_BONUS1"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _bonusWeapon) + "" [<t color='"" + BIS_FD_colorHTML + ""'>-"" + (str (_bonusWeapon * BIS_FD_pointTimeMulti * (BIS_FD_bonusPoints select 0))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "	if (_bonusShootingBox != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_BONUS2"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _bonusShootingBox) + "" [<t color='"" + BIS_FD_colorHTML + ""'>-"" + (str (_bonusShootingBox * BIS_FD_pointTimeMulti * (BIS_FD_bonusPoints select 1))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "	if (_bonusStance != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_BONUS3"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _bonusStance) + "" [<t color='"" + BIS_FD_colorHTML + ""'>-"" + (str (_bonusStance * BIS_FD_pointTimeMulti * (BIS_FD_bonusPoints select 2))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "	if (_bonusTargets != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_BONUS4"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _bonusTargets) + "" [<t color='"" + BIS_FD_colorHTML + ""'>-"" + (str (BIS_FD_pointTimeMulti * (BIS_FD_bonusPoints select 3))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "	if (_bonusAccuracy != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_BONUS5"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _bonusAccuracy) + "" [<t color='"" + BIS_FD_colorHTML + ""'>-"" + (str (BIS_FD_pointTimeMulti * (BIS_FD_bonusPoints select 4))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "		" \n
                         "	_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_TOTAL"") + "" <t color='"" + BIS_FD_colorHTML + ""'>-"" + (str (_bonus * BIS_FD_pointTimeMulti)) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t></t>"";" \n
                         "};" \n
                         "" \n
                         "if (_penalty != 0) then " \n
                         "{" \n
                         "	_text = _text + ""<br /><t size='0.8'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_PENALTY"");" \n
                         "	" \n
                         "	if (_penaltyWeapon != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_PENALTY1"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _penaltyWeapon) + "" [<t color='"" + BIS_FD_colorWarningHTML + ""'>+"" + (str (_penaltyWeapon * BIS_FD_pointTimeMulti * (BIS_FD_penaltyPoints select 0))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "	if (_penaltyShootingBox != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_PENALTY2"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _penaltyShootingBox) + "" [<t color='"" + BIS_FD_colorWarningHTML + ""'>+"" + (str (_penaltyShootingBox * BIS_FD_pointTimeMulti * (BIS_FD_penaltyPoints select 1))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "	if (_penaltyStance != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_PENALTY3"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _penaltyStance) + "" [<t color='"" + BIS_FD_colorWarningHTML + ""'>+"" + (str (_penaltyStance * BIS_FD_pointTimeMulti * (BIS_FD_penaltyPoints select 2))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "	if (_penaltyNoShoot != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_PENALTY4"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _penaltyNoShoot) + "" [<t color='"" + BIS_FD_colorWarningHTML + ""'>+"" + (str (_penaltyNoShoot * BIS_FD_pointTimeMulti * (BIS_FD_penaltyPoints select 3))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "	if (_penaltyMissed != 0) then " \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_PENALTY5"") + "" "" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_MULTIPLICATION"") + (str _penaltyMissed) + "" [<t color='"" + BIS_FD_colorWarningHTML + ""'>+"" + (str (_penaltyMissed * BIS_FD_pointTimeMulti * (BIS_FD_penaltyPoints select 4))) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t>]"";" \n
                         "	};" \n
                         "		" \n
                         "	_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_TOTAL"") + "" <t color='"" + BIS_FD_colorWarningHTML + ""'>+"" + (str (_penalty * BIS_FD_pointTimeMulti)) + (localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_UNIT_SECONDS"") + ""</t></t>"";" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	if (BIS_FD_ruleSet == 1) then " \n
                         "	{" \n
                         "		setStatValue [""AchievedFDSpecial1"", 1]; //Update Steam stat for Achievements - completed competitive without penalties" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "//Update Steam stat for Achievements - completed competitive and hit all bonus targets" \n
                         "if ((getStatValue ""AchievedFDSpecial2"") != 1) then " \n
                         "{" \n
                         "	scopeName ""bonusScope"";" \n
                         "" \n
                         "	private [""_hitAllBonus""];" \n
                         "	_hitAllBonus = true;" \n
                         "" \n
                         "	{" \n
                         "		private [""_targets""];	" \n
                         "		_targets = _x getVariable [""targets"", []];" \n
                         "		{" \n
                         "			if (((_x getVariable ""bonus"") > 0) && ((_x getVariable ""state"") != 3)) then {_hitAllBonus = false; breakTo ""bonusScope""};" \n
                         "		} forEach _targets;" \n
                         "	} forEach BIS_FD_CPs;" \n
                         "	" \n
                         "	if (_hitAllBonus) then {setStatValue [""AchievedFDSpecial2"", 1];};" \n
                         "};" \n
                         "" \n
                         "_timeFinish = (_timeFinish - (_bonus * BIS_FD_pointTimeMulti) + (_penalty * BIS_FD_pointTimeMulti)) max 0;" \n
                         "_timeFinishFormat = [_timeFinish, ""MM:SS.MS"", true] call BIS_fnc_secondsToString;" \n
                         "" \n
                         "BIS_FD_completedOnce = true;" \n
                         "setStatValue [(""Completed"" + _stat), 1]; //Update Steam stat for Achievements - completed with any time" \n
                         "" \n
                         "//TODO: consolidate into one function?" \n
                         "private [""_colorTime"", ""_iconTime""];" \n
                         "if (BIS_FD_ruleSet == 1) then " \n
                         "{" \n
                         "	if (_timeFinish <= BIS_FD_timeSpecial) then " \n
                         "	{" \n
                         "		_colorTime = BIS_FD_colorSpecial;" \n
                         "		_iconTime = BIS_FD_iconSpecial;" \n
                         "" \n
                         "		[""Positive"", ""Firing_Drills"", [[""ROF"", 4], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "		_feedbackProvided = true;" \n
                         "" \n
                         "		if (BIS_FD_timeSpecial != -1) then " \n
                         "		{" \n
                         "			activateKey (""BIS_"" + missionName + ""_done"");" \n
                         "		};" \n
                         "	} " \n
                         "	else " \n
                         "	{	" \n
                         "		if (_timeFinish <= BIS_FD_timeGold) then " \n
                         "		{" \n
                         "			_colorTime = BIS_FD_colorGold;" \n
                         "			_iconTime = BIS_FD_iconGold;" \n
                         "" \n
                         "			[""Positive"", ""Firing_Drills"", [[[""ROF"", 4]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "			_feedbackProvided = true;" \n
                         "" \n
                         "			setStatValue [(""CompletedBronze"" + _stat), 1]; //Update Steam stat for Achievements - completed at Bronze" \n
                         "			setStatValue [(""CompletedSilver"" + _stat), 1]; //Update Steam stat for Achievements - completed at Silver" \n
                         "			setStatValue [(""CompletedGold"" + _stat), 1]; //Update Steam stat for Achievements - completed at Gold" \n
                         "" \n
                         "			if (BIS_FD_timeSpecial == -1) then " \n
                         "			{" \n
                         "				activateKey (""BIS_"" + missionName + ""_done"");" \n
                         "			};" \n
                         "		} " \n
                         "		else " \n
                         "		{" \n
                         "			if (_timeFinish <= BIS_FD_timeSilver) then " \n
                         "			{" \n
                         "				_colorTime = BIS_FD_colorSilver;" \n
                         "				_iconTime = BIS_FD_iconSilver;" \n
                         "" \n
                         "				[""Positive"", ""Firing_Drills"", [[""ROF"", 3], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "				_feedbackProvided = true;" \n
                         "" \n
                         "				setStatValue [(""CompletedBronze"" + _stat), 1]; //Update Steam stat for Achievements - completed at Bronze" \n
                         "				setStatValue [(""CompletedSilver"" + _stat), 1]; //Update Steam stat for Achievements - completed at Silver" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				if (_timeFinish <= BIS_FD_timeBronze) then " \n
                         "				{" \n
                         "					_colorTime = BIS_FD_colorBronze;" \n
                         "					_iconTime = BIS_FD_iconBronze;" \n
                         "" \n
                         "					[""Positive"", ""Firing_Drills"", [[""ROF"", 3], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "					_feedbackProvided = true;" \n
                         "" \n
                         "					setStatValue [(""CompletedBronze"" + _stat), 1]; //Update Steam stat for Achievements - completed at Bronze" \n
                         "				} " \n
                         "				else " \n
                         "				{" \n
                         "					_colorTime = BIS_FD_colorHTML;" \n
                         "					_iconTime = ""A3\Modules_F_Beta\data\FiringDrills\medal_none_ca"";" \n
                         "				};" \n
                         "			};" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "if (isNil ""_colorTime"") then " \n
                         "{" \n
                         "	_colorTime = BIS_FD_colorHTML;" \n
                         "	_iconTime = ""A3\Modules_F_Beta\data\FiringDrills\medal_none_ca"";" \n
                         "};" \n
                         "" \n
                         "if ((_bonus != 0) || (_penalty != 0)) then " \n
                         "{" \n
                         "	_text = _text + ""<br /><br />"";" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	_text = _text + ""<br />"";" \n
                         "};" \n
                         "" \n
                         "private [""_resultText""];" \n
                         "_resultText = format [""<t color='"" + _colorTime + ""'>%1:%2<t size='1'>.%3</t></t>"", _timeFinishFormat select 0, _timeFinishFormat select 1, _timeFinishFormat select 2];" \n
                         "_text = _text + ""<t size='1.2'>"" + _resultText + ""</t>"";" \n
                         "" \n
                         "if (BIS_FD_ruleSet == 1) then " \n
                         "{" \n
                         "	private [""_resultText2""];" \n
                         "	_resultText2 = "" <t color='"" + _colorTime + ""'><img image='"" + _iconTime + ""' /></t>"";" \n
                         "	_resultText = _resultText + _resultText2;" \n
                         "	_text = _text + _resultText2;" \n
                         "};" \n
                         "" \n
                         "BIS_FD_sessionTimes set [count BIS_FD_sessionTimes, _resultText];" \n
                         "" \n
                         "if ((_timeFinish < BIS_FD_timeBest) || (BIS_FD_timeBest == -1)) then " \n
                         "{" \n
                         "	BIS_FD_timeBest = _timeFinish;" \n
                         "	BIS_FD_timeBestText = [BIS_FD_timeBest, ""MM:SS.MS""] call BIS_fnc_secondsToString;" \n
                         "	BIS_FD_timeBestText = ""<t color='"" + _colorTime + ""'>"" + BIS_FD_timeBestText + ""</t>"";" \n
                         "	if (BIS_FD_ruleSet == 1) then {BIS_FD_timeBestText = BIS_FD_timeBestText + "" <t color='"" + _colorTime + ""'><img image='"" + _iconTime + ""' /></t>""};" \n
                         "	" \n
                         "	_stats set [1, _timeFinish];" \n
                         "" \n
                         "	if (_timeFinish < BIS_FD_timeBest) then " \n
                         "	{" \n
                         "		[""Positive"", ""Firing_Drills"", [[""ROF"", 5], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "		_feedbackProvided = true;" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "//Competitive, much slower than Bronze" \n
                         "if (!_feedbackProvided) then " \n
                         "{" \n
                         "	if (BIS_FD_ruleSet == 1) then " \n
                         "	{" \n
                         "		if (_timeFinish > (BIS_FD_timeBronze + 20)) then " \n
                         "		{" \n
                         "			[""Negative"", ""Firing_Drills"", [[""ROF"", 4], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "			_feedbackProvided = true;" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "if (!_feedbackProvided) then " \n
                         "{" \n
                         "	//Much slower than PB" \n
                         "	if (BIS_FD_timeBest != -1) then " \n
                         "	{" \n
                         "		if (_timeFinish > (BIS_FD_timeBest + 5)) then " \n
                         "		{" \n
                         "			[""Negative"", ""Firing_Drills"", [[""ROF"", 8], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "			_feedbackProvided = true;" \n
                         "		};" \n
                         "	};" \n
                         "	" \n
                         "	//Much slower than PB" \n
                         "	if (BIS_FD_timePrevious != -1) then " \n
                         "	{" \n
                         "		if (_timeFinish > (BIS_FD_timePrevious + 10)) then " \n
                         "		{" \n
                         "			[""Negative"", ""Firing_Drills"", [[[""ROF"", 7], [""ROF"", 9]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "			_feedbackProvided = true;" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "//Still no feedback, catch all" \n
                         "if (!_feedbackProvided) then " \n
                         "{" \n
                         "	[""Neutral"", ""Firing_Drills"", [[[""ROF"", 1], [""ROF"", 2]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "	_feedbackProvided = true;" \n
                         "};" \n
                         "" \n
                         "_text = _text + ""<t size='1'>"";" \n
                         "if (BIS_FD_timeBestText != """") then {_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_TIME_BEST"") + "" "" + BIS_FD_timeBestText};" \n
                         "if (BIS_FD_timePreviousText != """") then {_text = _text + ""<br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_TIME_PREVIOUS"") + "" "" + BIS_FD_timePreviousText};" \n
                         "_text = _text + ""</t>"";" \n
                         "" \n
                         "_text = _text + ""<br /><br /><t size='0.8'>"" + (format [(localize ""STR_A3_FIRING_DRILLS_HINT_RESULTS_RESTART""), ""<img image='A3\Modules_F_Beta\data\FiringDrills\restart_ca' />""]) + ""</t>"";" \n
                         "" \n
                         "_text = _text + ""</t>"";" \n
                         "" \n
                         "RscFiringDrillTime_done = true;" \n
                         "hintSilent (parseText _text);" \n
                         "" \n
                         "//Save stats" \n
                         "_stats set [0, _timeFinish];" \n
                         "profileNamespace setVariable [_preFix + (str BIS_FD_ruleSet), _stats];" \n
                         "saveProfileNamespace;" \n
                         "" \n
                         "_timeNow = time;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Restart_selector">*/
                                class Restart_selector
                                {
                                        itemno = 18;
                                        priority = 0.000000;
                                        to="Restarting";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(BIS_FD_Competitor in (list _cpStart))" \n
                                         "||" \n
                                         "BIS_FD_restart" \n
                                         "|| " \n
                                         "((time - _timeNow) > 60)"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Rules_changed">*/
                class Rules_changed
                {
                        name = "Rules_changed";
                        itemno = 12;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Always">*/
                                class Always
                                {
                                        itemno = 23;
                                        priority = 0.000000;
                                        to="Ready";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Reset">*/
                class Reset
                {
                        name = "Reset";
                        itemno = 13;
                        init = /*%FSM<STATEINIT""">*/"BIS_FD_activeCP = -1;" \n
                         "BIS_FD_nextCP = -1;" \n
                         "" \n
                         "//Reset CPs and targets" \n
                         "{" \n
                         "	_x setVariable [""activated"", false];" \n
                         "	_x setVariable [""clear"", false];	" \n
                         "" \n
                         "	private [""_targets""];	" \n
                         "	_targets = _x getVariable [""targets"", []];" \n
                         "	{" \n
                         "		_x setDamage 0;" \n
                         "		_x setVariable [""state"", 0];" \n
                         "" \n
                         "		private [""_onReset""];" \n
                         "		_onReset = _x getVariable [""onReset"", """"];" \n
                         "		if (_onReset != """") then {private [""_handle""]; _handle = [_x] execVM _onReset;};" \n
                         "" \n
                         "		_x setDir (_x getVariable [""direction"", direction _x]);" \n
                         "		_x setVelocity [0, 0, 0];" \n
                         "" \n
                         "		//Move targets back" \n
                         "		if (!(_x getVariable [""BIS_DynO_ASL"", false])) then " \n
                         "		{" \n
                         "			_x setPos (_x getVariable [""position"", position _x]);" \n
                         "		} " \n
                         "		else " \n
                         "		{" \n
                         "			_x setPosASL (_x getVariable [""position"", getPosASL _x]);" \n
                         "		};" \n
                         "" \n
                         "		//TODO: re-randomize pos / dir or allow for training?" \n
                         "	} forEach _targets;" \n
                         "} forEach BIS_FD_CPs;" \n
                         "" \n
                         "//TODO: is this necessary? Handled in Select rules state?" \n
                         "private [""_ruleTarget""];" \n
                         "_ruleTarget = objNull;" \n
                         "if (BIS_FD_ruleSet == 0) then " \n
                         "{" \n
                         "	_ruleTarget = _ruleTarget2;" \n
                         "" \n
                         "	[""Rules"", ""Firing_Drills"", [[[""ROF"", 3], [""ROF"", 4]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "};" \n
                         "if (BIS_FD_ruleSet == 1) then " \n
                         "{" \n
                         "	_ruleTarget = _ruleTarget1;" \n
                         "" \n
                         "	[""Rules"", ""Firing_Drills"", [[[""ROF"", 5], [""ROF"", 6]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "};" \n
                         "" \n
                         "_ruleTarget animate [""Target_Bottom_Rotate"", 0];" \n
                         "_ruleTarget animate [""Bottom_Rotate"", 0];" \n
                         "_ruleTarget1 setDamage 0;" \n
                         "_ruleTarget2 setDamage 0;" \n
                         "" \n
                         "BIS_FD_ruleSelect = true;" \n
                         "" \n
                         "//Pop restart selector targets down" \n
                         "{" \n
                         "	_x animate [""Target_Bottom_Rotate"", 1];" \n
                         "	_x animate [""Bottom_Rotate"", 1];" \n
                         "	_x setDamage 0;" \n
                         "} forEach BIS_FD_restartSelectors;" \n
                         "" \n
                         "if (_onReset != """") then " \n
                         "{" \n
                         "	private [""_handle""];" \n
                         "	_handle = BIS_FD_Object execVM _onReset;" \n
                         "};" \n
                         "" \n
                         "//Reset cumulative bonuses" \n
                         "BIS_FD_bonusPoints set [3, 0];" \n
                         "BIS_FD_bonusPoints set [4, 0];" \n
                         "" \n
                         "//Set default stance" \n
                         "//ToDo: use setUnitPos once fixed" \n
                         "/*" \n
                         "if ((currentWeapon BIS_FD_Competitor) == (primaryWeapon BIS_FD_Competitor)) then " \n
                         "{" \n
                         "	BIS_FD_Competitor switchMove ""amovpercmstpsraswrfldnon"";" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	BIS_FD_Competitor switchMove ""amovpercmstpsraswpstdnon"";" \n
                         "};" \n
                         "*/" \n
                         "" \n
                         "RscFiringDrillTime_done = true;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Always">*/
                                class Always
                                {
                                        itemno = 24;
                                        priority = 0.000000;
                                        to="Select_rules";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Returned_start_C">*/
                class Returned_start_C
                {
                        name = "Returned_start_C";
                        itemno = 14;
                        init = /*%FSM<STATEINIT""">*/"BIS_FD_reset = true;" \n
                         "BIS_FD_phase = -1;" \n
                         "" \n
                         "_timeNow = time;" \n
                         "" \n
                         "hintSilent (parseText (""<t align='left' color='"" + BIS_FD_colorTextHTML + ""'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RETURN"") + ""</t>""));" \n
                         "" \n
                         "[""Misc"", ""Firing_Drills"", [[""ROF"", 5], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "" \n
                         "private [""_resultText""];" \n
                         "_resultText = ""<t color='"" + BIS_FD_colorTextHTML + ""'>--:--<t size='0.8'>.---</t>"";" \n
                         "if (BIS_FD_ruleSet == 1) then {_resultText = _resultText + "" <img image='A3\Modules_F_Beta\data\FiringDrills\medal_none_ca' />""};" \n
                         "" \n
                         "BIS_FD_sessionTimes set [count BIS_FD_sessionTimes, _resultText];" \n
                         "" \n
                         "titleCut ["""", ""BLACK OUT"", 1.5];"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "___5s">*/
                                class ___5s
                                {
                                        itemno = 25;
                                        priority = 0.000000;
                                        to="Reset";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(time - _timeNow) > 1.5"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Select_rules">*/
                class Select_rules
                {
                        name = "Select_rules";
                        itemno = 26;
                        init = /*%FSM<STATEINIT""">*/"if (isNil ""BIS_FD_reset"") then {BIS_FD_reset = false;};" \n
                         "" \n
                         "if (!_startedAtStart || BIS_FD_reset) then {titleCut ["""", ""BLACK IN"", 1];};" \n
                         "" \n
                         "BIS_FD = 0; //To support multiple in one scenario later" \n
                         "BIS_FD_quickStart = false;" \n
                         "BIS_FD_started = false;" \n
                         "BIS_FD_ended = false;" \n
                         "" \n
                         "BIS_FD_phase = 1;" \n
                         "" \n
                         "BIS_FD_targetsRemaining = 0;" \n
                         "" \n
                         "BIS_FD_Competitor setPos BIS_FD_CompetitorPos;" \n
                         "BIS_FD_Competitor setDir BIS_FD_CompetitorDir;" \n
                         "" \n
                         "private [""_preFix""];" \n
                         "_preFix = missionName + ""_"" + (str BIS_FD) + ""_"";" \n
                         "" \n
                         "//Fetch medal times" \n
                         "private [""_timesMedals"", ""_timeBronzeText"", ""_timeSilverText"", ""_timeGoldText""];" \n
                         "_timesMedals = getArray (_cfgFD >> ""timesMedals"");" \n
                         "BIS_FD_timeBronze = _timesMedals select 0;" \n
                         "_timeBronzeText = [BIS_FD_timeBronze, ""MM:SS.MS""] call BIS_fnc_secondsToString;" \n
                         "BIS_FD_timeSilver = _timesMedals select 1;" \n
                         "_timeSilverText = [BIS_FD_timeSilver, ""MM:SS.MS""] call BIS_fnc_secondsToString;" \n
                         "BIS_FD_timeGold = _timesMedals select 2;" \n
                         "_timeGoldText = [BIS_FD_timeGold, ""MM:SS.MS""] call BIS_fnc_secondsToString;" \n
                         "" \n
                         "//Optional special times" \n
                         "private [""_timeSpecialText"", ""_nameSpecial""];" \n
                         "if ((configName (_cfgFD >> ""timeSpecial"")) != """") then " \n
                         "{" \n
                         "	BIS_FD_timeSpecial = getNumber (_cfgFD >> ""timeSpecial"");" \n
                         "	_timeSpecialText = [BIS_FD_timeSpecial, ""MM:SS.MS""] call BIS_fnc_secondsToString;" \n
                         "	BIS_FD_colorSpecial = getText (_cfgFD >> ""colorSpecial"");" \n
                         "	if (BIS_FD_colorSpecial == """") then {BIS_FD_colorSpecial = ""#FFFFFF""};" \n
                         "	_nameSpecial = getText (_cfgFD >> ""nameSpecial"");" \n
                         "	if (_nameSpecial == """") then {_nameSpecial = ""Special""}; //TODO: Localize" \n
                         "	BIS_FD_iconSpecial = getText (_cfgFD >> ""iconSpecial"");" \n
                         "	if (BIS_FD_iconSpecial == """") then {BIS_FD_iconSpecial = """"};" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	BIS_FD_timeSpecial = -1;" \n
                         "	_timeSpecialText = """";" \n
                         "	BIS_FD_colorSpecial = ""FFFFFF"";" \n
                         "	_nameSpecial = """";" \n
                         "	BIS_FD_iconSpecial = """";" \n
                         "};" \n
                         "" \n
                         "//Welcome message" \n
                         "private [""_text""];" \n
                         "_text = ""<t align='center' size='1.2' color='"" + BIS_FD_colorTextHTML + ""'>"" + BIS_FD_nameFormatted + ""</t><br />"";" \n
                         "_text = _text + ""<t align='left'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RULES1"") + ""<br /><t color='"" + BIS_FD_colorHTML + ""'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RULES2"") + ""</t> <img image='A3\Modules_F_Beta\data\FiringDrills\training_ca' /> - <t color='"" + BIS_FD_colorHTML + ""'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RULES3"") + ""</t> <img image='A3\Modules_F_Beta\data\FiringDrills\competitive_ca' /><br /><br /><t size='0.8'>"" + (localize ""STR_A3_FIRING_DRILLS_HINT_RULES4"") + ""</t></t>"";" \n
                         "" \n
                         "hintSilent (parseText _text);" \n
                         "" \n
                         "//Reset ammo / weapon containers" \n
                         "{" \n
                         "	private [""_container""];" \n
                         "	_container = call (compile _x);" \n
                         "	clearMagazineCargo _container; " \n
                         "	clearWeaponCargo _container;" \n
                         "" \n
                         "	{" \n
                         "		_container addWeaponCargo [_x, 1];" \n
                         "	} forEach _weapons;" \n
                         "} forEach _containersWeapons;" \n
                         "" \n
                         "{" \n
                         "	private [""_container""];" \n
                         "	_container = call (compile _x);" \n
                         "	clearMagazineCargo _container; " \n
                         "	clearWeaponCargo _container;" \n
                         "" \n
                         "	{" \n
                         "		_container addMagazineCargo [_x, _containersMagazinesCount select _forEachIndex]; //TODO: validity check?" \n
                         "	} forEach _magazines;" \n
                         "} forEach _containersMagazines;" \n
                         "" \n
                         "if (!BIS_FD_reset) then " \n
                         "{" \n
                         "	[""Rules"", ""Firing_Drills"", [[[""ROF"", 1], [""ROF"", 2]] call BIS_fnc_selectRandom, true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	//On reset we need to give back original weapons" \n
                         "	//Cannot be done always due to CoF Green e.g." \n
                         "	//Reset competitor weapons" \n
                         "	removeAllWeapons BIS_FD_competitor;" \n
                         "" \n
                         "	//Remove all inventory magazines" \n
                         "	{" \n
                         "		BIS_FD_Competitor removeMagazine _x;" \n
                         "	} forEach (magazines BIS_FD_Competitor);" \n
                         "" \n
                         "	if (_binocularCompetitor != """") then " \n
                         "	{" \n
                         "		BIS_FD_competitor addWeapon _binocularCompetitor;" \n
                         "	} " \n
                         "	else " \n
                         "	{" \n
                         "		BIS_FD_competitor addWeapon ""Binocular"";" \n
                         "	};" \n
                         "" \n
                         "	{" \n
                         "		BIS_FD_competitor addMagazine _x;" \n
                         "	} forEach _magazinesCompetitor;" \n
                         "" \n
                         "	{" \n
                         "		BIS_FD_competitor addWeapon _x;" \n
                         "	} forEach _weaponsCompetitor;" \n
                         "" \n
                         "	{" \n
                         "		for ""_i"" from 0 to 3 do " \n
                         "		{" \n
                         "			BIS_FD_competitor addMagazine _x;" \n
                         "		};" \n
                         "	} forEach _magazinesCompetitor;" \n
                         "" \n
                         "	//Reset competitor health" \n
                         "	BIS_FD_Competitor setDamage 0;" \n
                         "	BIS_FD_Competitor setFatigue 0;" \n
                         "};" \n
                         "" \n
                         "//Show all CP markers" \n
                         "{" \n
                         "	[_x, 0.6] spawn BIS_fnc_moduleFDFadeMarker;" \n
                         "	_x setMarkerType ""mil_marker"";" \n
                         "} forEach BIS_FD_CPMarkers;" \n
                         "" \n
                         "{" \n
                         "	[_x, 0.5] spawn BIS_fnc_moduleFDFadeMarker;" \n
                         "} forEach BIS_FD_CPAreaMarkers;" \n
                         "" \n
                         "{" \n
                         "	[_x, 0] spawn BIS_fnc_moduleFDFadeMarker;" \n
                         "} forEach BIS_FD_CPShootingBoxMarkers;" \n
                         "" \n
                         "{" \n
                         "	[_x, 0] spawn BIS_fnc_moduleFDFadeMarker;" \n
                         "	_x setMarkerType (BIS_FD_CPTargetMarkerTypes select _forEachIndex);" \n
                         "	_x setMarkerSize [0.4, 0.4];" \n
                         "} forEach BIS_FD_CPTargetMarkers;" \n
                         "" \n
                         "BIS_FD_reset = false;" \n
                         "" \n
                         "//Freeze" \n
                         "BIS_FD_freezePlayer = true;" \n
                         "" \n
                         "[] spawn " \n
                         "{" \n
                         "	scriptName ""[FD] Freeze player"";" \n
                         "" \n
                         "	private [""_pos""];" \n
                         "	_pos = position BIS_FD_Competitor;" \n
                         "" \n
                         "	while {BIS_FD_freezePlayer && !BIS_FD_reset} do " \n
                         "	{" \n
                         "		BIS_FD_Competitor setPos _pos;" \n
                         "" \n
                         "		sleep 0.001;" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "_timeNow = time;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Rules_selected_OR">*/
                                class Rules_selected_OR
                                {
                                        itemno = 27;
                                        priority = 0.000000;
                                        to="Ready";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(BIS_FD_ruleSet != -1) " \n
                                         "|| " \n
                                         "((time - _timeNow) > 30)"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Pre_init_Load_co">*/
                class Pre_init_Load_co
                {
                        name = "Pre_init_Load_co";
                        itemno = 29;
                        init = /*%FSM<STATEINIT""">*/"titleCut ["""", ""BLACK FADED"", 10000];" \n
                         "startLoadingScreen ["""", ""RscDisplayLoadMission""];" \n
                         "" \n
                         """BIS_FD_disabledSave"" call BIS_fnc_disableSaving;" \n
                         "disableSerialization;" \n
                         "" \n
                         "BIS_FD_Object = [_this, 0, objNull, [objNull]] call BIS_fnc_Param; //TODO: move global variables to its variable space" \n
                         "BIS_FD_restart = false;" \n
                         "" \n
                         "BIS_FD_phase = 0;" \n
                         "" \n
                         "//Retrieve correct colors, based on user pre-sets" \n
                         "BIS_FD_colorText = [""IGUI"", ""TEXT_RGB""] call BIS_fnc_displayColorGet;" \n
                         "BIS_FD_colorTextHTML = BIS_FD_colorText call BIS_fnc_colorRGBtoHTML;" \n
                         "BIS_FD_colorWarning = [""IGUI"", ""WARNING_RGB""] call BIS_fnc_displayColorGet;" \n
                         "BIS_FD_colorWarningHTML = BIS_FD_colorWarning call BIS_fnc_colorRGBtoHTML;" \n
                         "" \n
                         "//Used for 3D visualization of guidance" \n
                         "setGroupIconsVisible [false, true];" \n
                         "createCenter civilian;" \n
                         "" \n
                         "private [""_cfgFD""];" \n
                         "_cfgFD = configFile >> ""CfgFiringDrills"" >> missionName;" \n
                         "" \n
                         "//Initialize PiP feedback functions" \n
                         "BIS_FD_PiP = false;" \n
                         "" \n
                         "BIS_FD_getTargetCandidates = " \n
                         "{" \n
                         "	private [""_candidates""];" \n
                         "	_candidates = [];" \n
                         "" \n
                         "	{" \n
                         "		if " \n
                         "		(" \n
                         "			(" \n
                         "				((_x getVariable [""state"", -1]) in [1, 2]) " \n
                         "				||" \n
                         "				(((_x getVariable [""state"", -1]) == 3) && ((time - (_x getVariable [""timeHit"", -100])) < 5))" \n
                         "			)" \n
                         "			&& " \n
                         "			((_x getVariable [""noShoot"", 0]) != 1) " \n
                         "			&& " \n
                         "			((BIS_FD_Competitor distance _x) > 200) " \n
                         "		) " \n
                         "		then " \n
                         "		{" \n
                         "			_candidates set [count _candidates, _x];" \n
                         "		};" \n
                         "	} forEach _this;" \n
                         "	" \n
                         "	_candidates" \n
                         "};" \n
                         "" \n
                         "BIS_FD_endPiP = " \n
                         "{" \n
                         "	if (!BIS_FD_PiPEnding && BIS_FD_PiP) then " \n
                         "	{" \n
                         "		if (BIS_FD_PiPStarting) then {waitUntil {!BIS_FD_PiPStarting}};" \n
                         "	" \n
                         "		BIS_FD_PiPEnding = true;" \n
                         "" \n
                         "		disableSerialization;" \n
                         "		" \n
                         "		private [""_disp""];" \n
                         "		_disp = uiNamespace getVariable ""BIS_fnc_PIP_RscPIP"";" \n
                         "		" \n
                         "		// Display images" \n
                         "		for ""_i"" from 12 to 0 step -1 do " \n
                         "		{" \n
                         "			private [""_ctrl""];" \n
                         "			_ctrl = _disp displayCtrl (2400 + _i);" \n
                         "			" \n
                         "			_ctrl ctrlSetPosition ctrlPosition (_disp displayCtrl 2300);" \n
                         "			_ctrl ctrlCommit 0;" \n
                         "			" \n
                         "			uiSleep 0.03;" \n
                         "			" \n
                         "			_ctrl ctrlSetPosition [0,0,0,0];" \n
                         "			_ctrl ctrlCommit 0;" \n
                         "		};" \n
                         "		" \n
                         "		(""BIS_FD_IGUI_PiP"" call BIS_fnc_rscLayer) cutText ["""", ""PLAIN""];" \n
                         "		" \n
                         "		if (!(isNil ""BIS_FD_PiPCam"")) then " \n
                         "		{" \n
                         "			BIS_FD_PiPCam cameraEffect [""TERMINATE"", ""BACK""];" \n
                         "			camDestroy BIS_FD_PiPCam;" \n
                         "			BIS_FD_PiPCam = nil;" \n
                         "		};" \n
                         "" \n
                         "		BIS_FD_PiPEnding = false;" \n
                         "		BIS_FD_PiP = false;" \n
                         "	};" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "No_config">*/
                                class No_config
                                {
                                        itemno = 31;
                                        priority = 1.000000;
                                        to="End";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(configName _cfgFD) == """""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Otherwise">*/
                                class Otherwise
                                {
                                        itemno = 30;
                                        priority = 0.000000;
                                        to="Process_config_Spawn";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "End">*/
                class End
                {
                        name = "End";
                        itemno = 32;
                        init = /*%FSM<STATEINIT""">*/"endLoadingScreen;" \n
                         "titleCut ["""", ""BLACK IN"", 1.5];" \n
                         """No CfgFiringDrills class found!"" call BIS_fnc_error; //Debug message only - Don't localize"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Process_config_Spawn">*/
                class Process_config_Spawn
                {
                        name = "Process_config_Spawn";
                        itemno = 33;
                        init = /*%FSM<STATEINIT""">*/"private [""_name"", ""_stat"", ""_objCOF"", ""_COF"", ""_competitorStart"", ""_onReset""];" \n
                         "_name = getText (_cfgFD >> ""displayName"");" \n
                         "if (_name == """") then {_name = localize ""STR_A3_Firing_Drills_Drill"";};" \n
                         "" \n
                         "_stat = getText (_cfgFD >> ""statistic"");" \n
                         "" \n
                         "BIS_FD_color = getArray (_cfgFD >> ""color"");" \n
                         "if ((count BIS_FD_color) == 0) then {BIS_FD_color = [1, 1, 1, 1];};" \n
                         "BIS_FD_colorName = toLower (getText (_cfgFD >> ""colorName""));" \n
                         "if !(BIS_FD_colorName in [""green"", ""red"", ""blue"", ""orange"", ""white""]) then {BIS_FD_colorName = ""green"";};" \n
                         "" \n
                         "private [""_colorMarker""];" \n
                         "_colorMarker = ""Default"";" \n
                         "switch BIS_FD_colorName do " \n
                         "{" \n
                         "	case ""red"": {_colorMarker = ""Color1_FD_F"";};" \n
                         "	case ""green"": {_colorMarker = ""Color2_FD_F"";};" \n
                         "	case ""orange"": {_colorMarker = ""Color3_FD_F"";};" \n
                         "	case ""blue"": {_colorMarker = ""Color4_FD_F"";};" \n
                         "};" \n
                         "" \n
                         "BIS_FD_colorHTML = BIS_FD_color call BIS_fnc_colorRGBtoHTML;" \n
                         "BIS_FD_nameFormatted = ""<t color='"" + BIS_FD_colorHTML + ""'>"" + toUpper _name + ""</t>"";" \n
                         "_objCOF = getText (_cfgFD >> ""objectCOF"");" \n
                         "if (_objCOF != """") then " \n
                         "{" \n
                         "	call (compile (""_COF = "" + _objCOF));" \n
                         "" \n
                         "	//TODO: handle with error missing object" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	//Spawn dynamic COF" \n
                         "	//TODO: somehow dynamically cover COF area?" \n
                         "	_COF = createTrigger[""EmptyDetector"", position BIS_FD_Competitor];" \n
                         "};" \n
                         "" \n
                         "_COF setTriggerActivation [""NONE"", ""PRESENT"", true];" \n
                         "_COF triggerAttachVehicle [BIS_FD_Competitor];" \n
                         "" \n
                         "BIS_FD_Object setVariable [""name"", _name];" \n
                         "BIS_FD_Object setVariable [""courseOfFire"", _COF];" \n
                         "" \n
                         "_competitorStart = _cfgFD >> ""competitorStart"";" \n
                         "if ((configName _competitorStart) != """") then " \n
                         "{" \n
                         "	_competitorStart = getText _competitorStart;" \n
                         "	BIS_FD_CompetitorPos = markerPos _competitorStart;" \n
                         "	BIS_FD_CompetitorDir = markerDir _competitorStart;" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	_competitorStart = """";" \n
                         "	BIS_FD_CompetitorPos = position BIS_FD_Competitor;" \n
                         "	BIS_FD_CompetitorDir = direction BIS_FD_Competitor;" \n
                         "};" \n
                         "" \n
                         "_onReset = _cfgFD >> ""onReset"";" \n
                         "if ((configName _onReset) != """") then {_onReset = getText _onReset;} else {_onReset = """";};" \n
                         "" \n
                         "private [""_dynos""];" \n
                         "_dynos = _cfgFD >> ""DynOs"";" \n
                         "" \n
                         "for ""_i"" from 0 to ((count _dynos) - 1) do " \n
                         "{" \n
                         "	private [""_dyno""];" \n
                         "	_dyno = _dynos select _i;" \n
                         "	" \n
                         "	if (isClass _dyno) then " \n
                         "	{" \n
                         "		private [""_dynoScript"", ""_dynoPos""];" \n
                         "		_dynoScript = call (compile (preprocessFileLineNumbers (getText (_dyno >> ""script""))));" \n
                         "		_dynoPos = getText (_dyno >> ""positionAnchor"");" \n
                         "		if (_dynoPos == """") then " \n
                         "		{" \n
                         "			_dynoPos = getArray (_dyno >> ""positionAnchor"");" \n
                         "		} " \n
                         "		else " \n
                         "		{" \n
                         "			call (compile (""_dynoPos = "" + _dynoPos));" \n
                         "		};" \n
                         "" \n
                         "		BIS_FD_objects = [_dynoPos, 0, _dynoScript] call BIS_fnc_objectsMapper;" \n
                         "		" \n
                         "		//TODO: make optional debug mode - DISABLE" \n
                         "		/*" \n
                         "		private [""_draw""];" \n
                         "		_draw = " \n
                         "		""" \n
                         "			{" \n
                         "				private ['_boundBox', '_dimX', '_dimY'];" \n
                         "				_boundBox = boundingBoxReal _x;" \n
                         "				_dimX = abs (((_boundBox select 1) select 0) - ((_boundBox select 0) select 0));" \n
                         "				_dimY = abs (((_boundBox select 1) select 1) - ((_boundBox select 0) select 1));" \n
                         "				" \n
                         "				(_this select 0) drawRectangle [position _x, _dimX, _dimY, direction _x, [1, 1, 0, 0.6], '#(argb,8,8,3)color(1,1,1,1)'];" \n
                         "				(_this select 0) drawIcon ['#(argb,8,8,3)color(1,1,1,1)', [0, 0, 0, 1], position _x, 1, 1, direction _x, vehicleVarName _x, false];" \n
                         "			} forEach BIS_FD_objects;" \n
                         "		"";" \n
                         "" \n
                         "		(((uiNamespace getVariable ""gui_displays"") select 1) displayCtrl 51) ctrlSetEventHandler [""draw"", _draw];" \n
                         "		*/" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "endLoadingScreen;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Always">*/
                                class Always
                                {
                                        itemno = 41;
                                        priority = 0.000000;
                                        to="Init_Weapons";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "End_1">*/
                class End_1
                {
                        name = "End_1";
                        itemno = 35;
                        init = /*%FSM<STATEINIT""">*/"titleCut ["""", ""BLACK IN"", 1.5];" \n
                         """No Check Points found!"" call BIS_fnc_error; //Debug message only - Don't localize"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Wait_to_enter_St">*/
                class Wait_to_enter_St
                {
                        name = "Wait_to_enter_St";
                        itemno = 37;
                        init = /*%FSM<STATEINIT""">*/"private [""_cpStart""];" \n
                         "_cpStart = BIS_FD_CPs select 0;" \n
                         "" \n
                         "titleCut ["""", ""BLACK IN"", 1.5];" \n
                         "" \n
                         "private [""_startedAtStart""];" \n
                         "_startedAtStart = true;" \n
                         "if (!(BIS_FD_Competitor in (list _cpStart))) then {_startedAtStart = false;};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Entered_Start">*/
                                class Entered_Start
                                {
                                        itemno = 5;
                                        priority = 0.000000;
                                        to="Entered_start";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_Competitor in (list _cpStart)"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Entered_start">*/
                class Entered_start
                {
                        name = "Entered_start";
                        itemno = 38;
                        init = /*%FSM<STATEINIT""">*/"BIS_FD_atStart = true;" \n
                         "" \n
                         "if (!_startedAtStart) then {titleCut ["""", ""BLACK OUT"", 1];};" \n
                         "" \n
                         "[" \n
                         "	BIS_FD_competitor," \n
                         "	""BIS_FD""," \n
                         "	[" \n
                         "		format [localize ""STR_A3_FIRING_DRILLS_TASK_TEXT"", _name]," \n
                         "		_name," \n
                         "		toUpper _name" \n
                         "	]," \n
                         "	objNull," \n
                         "	true" \n
                         "] call BIS_fnc_taskCreate;" \n
                         "" \n
                         "_timeNow = time;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Started_outside">*/
                                class Started_outside
                                {
                                        itemno = 40;
                                        priority = 1.000000;
                                        to="Select_rules";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"((time - _timeNow) > 1) " \n
                                         "&& " \n
                                         "!_startedAtStart"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Otherwise">*/
                                class Otherwise
                                {
                                        itemno = 39;
                                        priority = 0.000000;
                                        to="Select_rules";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_startedAtStart"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Init_Weapons">*/
                class Init_Weapons
                {
                        name = "Init_Weapons";
                        itemno = 42;
                        init = /*%FSM<STATEINIT""">*/"private [""_containersWeapons"", ""_containersMagazines"", ""_containersMagazinesCount"", ""_weapons"", ""_magazines"", ""_weaponsCompetitor"", ""_magazinesCompetitor"", ""_binocularCompetitor"", ""_nvgCompetitor""];" \n
                         "_containersWeapons = getArray (_cfgFD >> ""containersWeapons"");" \n
                         "_containersMagazines = getArray (_cfgFD >> ""containersMagazines"");" \n
                         "_containersMagazinesCount = getArray (_cfgFD >> ""containersMagazinesCount"");" \n
                         "_weapons = getArray (_cfgFD >> ""weapons"");" \n
                         "_magazines = getArray (_cfgFD >> ""magazines"");" \n
                         "_weaponsCompetitor = getArray (_cfgFD >> ""weaponsCompetitor"");" \n
                         "_magazinesCompetitor = getArray (_cfgFD >> ""magazinesCompetitor"");" \n
                         "_binocularCompetitor = getText (_cfgFD >> ""binocularCompetitor"");" \n
                         "_nvgCompetitor = getText (_cfgFD >> ""nvgCompetitor"");" \n
                         "" \n
                         "removeAllWeapons BIS_FD_competitor;" \n
                         "" \n
                         "{" \n
                         "	BIS_FD_Competitor removeMagazine _x;" \n
                         "} forEach (magazines BIS_FD_Competitor);" \n
                         "" \n
                         "if (_binocularCompetitor != """") then " \n
                         "{" \n
                         "	BIS_FD_competitor addWeapon _binocularCompetitor;" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	BIS_FD_competitor addWeapon ""Binocular"";" \n
                         "};" \n
                         "" \n
                         "BIS_FD_competitor addItem ""itemGPS""; " \n
                         "BIS_FD_competitor assignitem ""itemGPS"";" \n
                         "" \n
                         "if (_nvgCompetitor != """") then " \n
                         "{" \n
                         "	BIS_FD_competitor addItem _nvgCompetitor;" \n
                         "	BIS_FD_competitor assignItem _nvgCompetitor;" \n
                         "};" \n
                         "" \n
                         "//Load first magazine into weapon" \n
                         "{" \n
                         "	BIS_FD_competitor addMagazine _x;" \n
                         "} forEach _magazinesCompetitor;" \n
                         "" \n
                         "{" \n
                         "	BIS_FD_competitor addWeapon _x;" \n
                         "} forEach _weaponsCompetitor;" \n
                         "" \n
                         "//Add remaining magazines" \n
                         "{" \n
                         "	for ""_i"" from 0 to 3 do " \n
                         "	{" \n
                         "		BIS_FD_competitor addMagazine _x;" \n
                         "	};" \n
                         "} forEach _magazinesCompetitor;" \n
                         "" \n
                         "private [""_timeNow""];" \n
                         "_timeNow = time;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "__s">*/
                                class __s
                                {
                                        itemno = 1;
                                        priority = 0.000000;
                                        to="Init";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(time - _timeNow) > 1"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Countdown">*/
                class Countdown
                {
                        name = "Countdown";
                        itemno = 43;
                        init = /*%FSM<STATEINIT""">*/"_timeNow = time;" \n
                         "" \n
                         "if (BIS_FD_quickStart) then " \n
                         "{" \n
                         "	BIS_FD_quickStart = false;" \n
                         "};" \n
                         "" \n
                         "BIS_FD_ruleSelect = false;" \n
                         "_ruleTarget1 animate [""Target_Bottom_Rotate"", 1];" \n
                         "_ruleTarget1 animate [""Bottom_Rotate"", 1];" \n
                         "_ruleTarget1 say ""FD_Target_PopDown_Small_F""; //TODO: only for the one popping" \n
                         "_ruleTarget2 animate [""Target_Bottom_Rotate"", 1];" \n
                         "_ruleTarget2 animate [""Bottom_Rotate"", 1];" \n
                         "_ruleTarget2 say ""FD_Target_PopDown_Small_F""; //TODO: only for the one popping" \n
                         "" \n
                         "RscFiringDrillTime_best = nil;" \n
                         "RscFiringDrillTime_previous = nil;" \n
                         "RscFiringDrillTime_bonus = nil;" \n
                         "RscFiringDrillTime_penalty = nil;" \n
                         "RscFiringDrillTime_done = false;" \n
                         "(""BIS_FD_IGUI_Time"" call BIS_fnc_rscLayer) cutRsc [""RscFiringDrillTime"", ""plain""];" \n
                         "" \n
                         "private [""_spawnHandle""];" \n
                         "_spawnHandle = _timeNow spawn " \n
                         "{" \n
                         "	private [""_3s"", ""_2s"", ""_1s""];" \n
                         "	_3s = false;" \n
                         "	_2s = false;" \n
                         "	_1s = false;" \n
                         "	while {(time - _this) < 3} do " \n
                         "	{" \n
                         "		if (((time - _this) > 0) && !_3s) then " \n
                         "		{" \n
                         "			_3s = true;		" \n
                         "" \n
                         "			[""Timing"", ""Firing_Drills"", [[""ROF"", 18], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "" \n
                         "			playSound ""FD_Timer_F"";" \n
                         "		};" \n
                         "" \n
                         "		if (((time - _this) > 1) && !_2s) then " \n
                         "		{" \n
                         "			_2s = true;" \n
                         "" \n
                         "			[""Timing"", ""Firing_Drills"", [[""ROF"", 17], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "" \n
                         "			playSound ""FD_Timer_F"";" \n
                         "		};" \n
                         "" \n
                         "		if (((time - _this) > 2) && !_1s) then " \n
                         "		{" \n
                         "			_1s = true;" \n
                         "" \n
                         "			[""Timing"", ""Firing_Drills"", [[""ROF"", 16], true], ""SIDE""] spawn BIS_fnc_kbTell;" \n
                         "" \n
                         "			playSound ""FD_Timer_F"";" \n
                         "		};" \n
                         "" \n
                         "		private [""_timeCount"", ""_timeCountFormat"", ""_textCount""];" \n
                         "		_timeCount = (_this + 3) - time;" \n
                         "		_timeCountFormat = [_timeCount, ""MM:SS.MS"", true] call BIS_fnc_secondsToString;" \n
                         "" \n
                         "		_textCount = ""<t color='"" + BIS_FD_colorTextHTML + ""'><img image='A3\Modules_F_Beta\data\FiringDrills\timer_ca' /> "";" \n
                         "		_textCount = _textCount + (format [""<t color='%4'>-%1:%2<t size='0.8'>.%3</t></t>"", _timeCountFormat select 0, _timeCountFormat select 1, _timeCountFormat select 2, BIS_FD_colorHTML]);" \n
                         "		_textCount = _textCount + ""</t>"";" \n
                         "" \n
                         "		RscFiringDrillTime_current = parsetext _textCount;" \n
                         "" \n
                         "		sleep 0.01;" \n
                         "	};" \n
                         "};" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Quit_">*/
                                class Quit_
                                {
                                        itemno = 46;
                                        priority = 5.000000;
                                        to="Quit";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"BIS_FD_ending"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Go">*/
                                class Go
                                {
                                        itemno = 44;
                                        priority = 0.000000;
                                        to="Go";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"scriptDone _spawnHandle"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Quit">*/
                class Quit
                {
                        name = "Quit";
                        itemno = 45;
                        init = /*%FSM<STATEINIT""">*/"_stats = profileNamespace getVariable [_preFix + ""1"", [-1, -1]]; //We care only about Competitive here" \n
                         "BIS_FD_timeBest = _stats select 1;" \n
                         "if (BIS_FD_timeBest != -1) then " \n
                         "{" \n
                         "	BIS_FD_timeBestText = [BIS_FD_timeBest, ""MM:SS.MS""] call BIS_fnc_secondsToString;" \n
                         "	" \n
                         "	//TODO: consolidate into one function?" \n
                         "	private [""_color"", ""_icon""];" \n
                         "	if (BIS_FD_timeBest <= BIS_FD_timeSpecial) then " \n
                         "	{" \n
                         "		_color = BIS_FD_colorSpecial;" \n
                         "		_icon = BIS_FD_iconSpecial;" \n
                         "	} " \n
                         "	else " \n
                         "	{	" \n
                         "		if (BIS_FD_timeBest <= BIS_FD_timeGold) then " \n
                         "		{" \n
                         "			_color = BIS_FD_colorGold;" \n
                         "			_icon = BIS_FD_iconGold;" \n
                         "		} " \n
                         "		else " \n
                         "		{" \n
                         "			if (BIS_FD_timeBest <= BIS_FD_timeSilver) then " \n
                         "			{" \n
                         "				_color = BIS_FD_colorSilver;" \n
                         "				_icon = BIS_FD_iconSilver;" \n
                         "			} " \n
                         "			else " \n
                         "			{" \n
                         "				if (BIS_FD_timeBest <= BIS_FD_timeBronze) then " \n
                         "				{" \n
                         "					_color = BIS_FD_colorBronze;" \n
                         "					_icon = BIS_FD_iconBronze;" \n
                         "				} " \n
                         "				else " \n
                         "				{" \n
                         "					_color = BIS_FD_colorHTML;" \n
                         "					_icon = ""A3\Modules_F_Beta\data\FiringDrills\medal_none_ca"";" \n
                         "				};" \n
                         "			};" \n
                         "		};" \n
                         "	};" \n
                         "" \n
                         "	BIS_FD_timeBestText = ""<t color='"" + _color + ""'>"" + BIS_FD_timeBestText + "" <img image='"" + _icon + ""' /></t>"";" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	BIS_FD_timeBestText = ""<t color='"" + BIS_FD_colorTextHTML + ""'>--:--<t size='0.8'>.---</t>"";" \n
                         "	BIS_FD_timeBestText = BIS_FD_timeBestText + "" <img image='A3\Modules_F_Beta\data\FiringDrills\medal_none_ca' />"";" \n
                         "};" \n
                         "" \n
                         "private [""_text""];" \n
                         "_text = ""<t align='center' size='1.2' color='"" + BIS_FD_colorTextHTML + ""'>"" + BIS_FD_nameFormatted + ""</t><br />"";" \n
                         "" \n
                         "//Medals" \n
                         "//TODO: support no medal times being defined?" \n
                         "_text = _text + ""<br />"";" \n
                         "_text = _text + ""<t color='"" + BIS_FD_colorBronze  + ""'>"" + _timeBronzeText + "" <img image='"" + BIS_FD_iconBronze + ""' /></t><br />"";" \n
                         "_text = _text + ""<t color='"" + BIS_FD_colorSilver  + ""'>"" + _timeSilverText + "" <img image='"" + BIS_FD_iconSilver + ""' /></t><br />"";" \n
                         "_text = _text + ""<t color='"" + BIS_FD_colorGold  + ""'>"" + _timeGoldText + "" <img image='"" + BIS_FD_iconGold + ""' /></t>"";" \n
                         "" \n
                         "if (BIS_FD_timeSpecial != -1) then " \n
                         "{" \n
                         "	_text = _text + ""<br />"" + _nameSpecial + "": <t color='"" + BIS_FD_colorSpecial  + ""'>"" + _timeSpecialText + "" <img image='"" + BIS_FD_iconSpecial + ""' /></t>"";" \n
                         "};" \n
                         "" \n
                         "//Statistics" \n
                         "_text = _text + ""<br /><br />"" + (localize ""STR_A3_FIRING_DRILLS_HINT_TIME_BEST"") + "" "" + BIS_FD_timeBestText ;" \n
                         "_text = _text + ""<br />"" + (localize ""STR_A3_TIME_TRIALS_SESSION"");" \n
                         "" \n
                         "if ((count BIS_FD_sessionTimes) > 0) then " \n
                         "{" \n
                         "	{" \n
                         "		_text = _text + ""<br />"" + (BIS_FD_sessionTimes select _forEachIndex);" \n
                         "	} forEach BIS_FD_sessionTimes;" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	_text = _text + ""<br />-"";" \n
                         "};" \n
                         "" \n
                         "if (BIS_FD_completedOnce) then " \n
                         "{" \n
                         "	[""BIS_FD"", ""SUCCEEDED""] call BIS_fnc_taskSetState;" \n
                         "} " \n
                         "else " \n
                         "{" \n
                         "	[""BIS_FD"", ""FAILED""] call BIS_fnc_taskSetState;" \n
                         "};" \n
                         "" \n
                         "_text = _text + ""</t>"";" \n
                         "" \n
                         "BIS_FD_results = _text;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Cheat">*/
                class Cheat
                {
                        name = "Cheat";
                        itemno = 48;
                        init = /*%FSM<STATEINIT""">*/"BIS_FD_ended = true;" \n
                         "hintSilent """";" \n
                         "RscFiringDrillTime_done = true;" \n
                         "RscFiringDrillCheckpoint_done = true;" \n
                         "" \n
                         "[""end3""] call BIS_fnc_endMission;" \n
                         "" \n
                         "[""BIS_FD"", ""FAILED""] call BIS_fnc_taskSetState;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Died">*/
                class Died
                {
                        name = "Died";
                        itemno = 50;
                        init = /*%FSM<STATEINIT""">*/"BIS_FD_ended = true;" \n
                         "hintSilent """";" \n
                         "RscFiringDrillTime_done = true;" \n
                         "RscFiringDrillCheckpoint_done = true;" \n
                         "" \n
                         "[""BIS_FD"", ""FAILED""] call BIS_fnc_taskSetState;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Restart">*/
                class Restart
                {
                        name = "Restart";
                        itemno = 51;
                        init = /*%FSM<STATEINIT""">*/"private [""_resultText""];" \n
                         "_resultText = ""<t color='"" + BIS_FD_colorTextHTML + ""'>--:--<t size='0.8'>.---</t>"";" \n
                         "if (BIS_FD_ruleSet == 1) then {_resultText = _resultText + "" <img image='A3\Modules_F_Beta\data\FiringDrills\medal_none_ca' />""};" \n
                         "" \n
                         "BIS_FD_sessionTimes set [count BIS_FD_sessionTimes, _resultText];"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Always">*/
                                class Always
                                {
                                        itemno = 52;
                                        priority = 0.000000;
                                        to="Restarting";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
        };
        initState="Start";
        finalStates[] =
        {
                "End",
                "End_1",
                "Quit",
                "Cheat",
                "Died",
        };
};
/*%FSM</COMPILE>*/